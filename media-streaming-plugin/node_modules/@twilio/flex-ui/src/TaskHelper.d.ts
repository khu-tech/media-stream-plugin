import { ChatChannelHelper, ChatChannelState } from "@twilio/flex-ui-core";
import { ITask } from "./models";
import { ConferenceParticipant } from "./state/Conferences";
import { CallCanvasParticipant } from "./state/Participants/participants.selectors";
/**
 * @classdesc Helper class for tasks
 * @category Helpers
 */
export declare class TaskHelper {
    private task;
    private chatChannelHelper;
    /**
     * Creates an instance of TaskHelper.
     * @param {ITask} task task
     */
    constructor(task: ITask);
    /**
     * Gets the helper for last chat message.
     *
     * @readonly
     * @deprecated
     * @return ChatChannelState.MessageState
     * @private
     */
    get lastChatMessage(): ChatChannelState.MessageState;
    /**
     * Gets the helper for associated chat channel.
     *
     * @readonly
     * @type {ChatChannelHelper}
     * @example
     * import { TaskHelper } from "@twilio/flex-ui";
     * const taskHelper = new TaskHelper(someTask);
     * console.log(taskHelper.chat);
     */
    get chat(): ChatChannelHelper;
    /**
     * Duration since last update of a task. Uses `dateUpdated` property of a task.
     *
     * @readonly
     * @type {string}
     * @example
     * import { TaskHelper } from "@twilio/flex-ui";
     * const taskHelper = new TaskHelper(someTask);
     * console.log(taskHelper.durationSinceUpdate);
     */
    get durationSinceUpdate(): string;
    /**
     * Duration since last update of a task in short format. Uses `dateUpdated` property of a task.
     *
     * @readonly
     * @type {string}
     * @example
     * import { TaskHelper } from "@twilio/flex-ui";
     * const taskHelper = new TaskHelper(someTask);
     * console.log(taskHelper.durationSinceUpdateShort);
     */
    get durationSinceUpdateShort(): string;
    get jsonString(): string;
    /**
     * Returns true if task is a live (accepted) call.
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isLiveCall(task: ITask): boolean;
    /**
     * Returns true if task is a live call task
     *
     * @ignore
     * @returns {boolean}
     */
    get isLiveCall(): boolean;
    /**
     * Returns true if call associated with a task is on hold
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isCallOnHold(task: ITask): boolean;
    /**
     * Returns true if call associated with a task is on hold
     *
     * @ignore
     * @returns {boolean}
     */
    get isCallOnHold(): boolean;
    /**
     * Returns true if current worker can kick the worker participant in the live call task
     *
     * @static
     * @param {ITask} task
     * @param {ConferenceState.ConferenceParticipant} participant
     * @returns {boolean}
     */
    static canKickWorkerParticipant(task: ITask, participant: ConferenceParticipant | CallCanvasParticipant): boolean;
    /**
     * Returns true if task is live call task and worker can hold this call task
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static canHold(task: ITask): boolean;
    /**
     * Returns true if task is conference call and worker is on hold
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static amIOnHold(task: ITask): boolean;
    /**
     * Returns true if task is live call task and worker can transfer this call task
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static canTransfer(task: ITask): boolean;
    /**
     * Returns true if task is regular Flex conference call, not a custom call task
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isRegularConferenceCall(task: ITask): boolean;
    /**
     * Returns true if task is Flex conference call with more than 2 participants
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isGroupCall(task: ITask): boolean;
    /**
     * Returns true if task is a live (accepted) chat based.
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isLiveChat(task: ITask): boolean;
    /**
     * Returns true if task is a live (accepted) chat based.
     *
     * @ignore
     * @returns {boolean}
     */
    get isLiveChat(): boolean;
    /**
     * Returns true if task is an incoming call.
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isIncomingCall(task: ITask): boolean;
    /**
     * Returns true if task is an incoming call.
     *
     * @ignore
     * @returns {boolean}
     */
    get isIncomingCall(): boolean;
    /**
     * Returns true if task is a chat based
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isChatBasedTask(task: ITask): boolean;
    /**
     * Returns true if task is a chat based
     *
     * @ignore
     * @returns {boolean}
     */
    get isChatBasedTask(): boolean;
    /**
     * Returns true if task is a call based task
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isCallTask(task: ITask): boolean;
    /**
     * Returns true if task is a call based task
     *
     * @ignore
     * @returns {boolean}
     */
    get isCallTask(): boolean;
    /**
     * Unused.
     * @ignore
     */
    static isVideoCallTask(task: ITask): boolean;
    /**
     * Gets chat channel sid for a task
     *
     * @static
     * @param {ITask} task
     * @returns {string} chat channel sid
     */
    static getTaskChatChannelSid(task: ITask): any;
    /**
     * Gets chat channel sid for a task
     *
     * @ignore
     * @returns {boolean}
     */
    get getTaskChatChannelSid(): boolean;
    /**
     * Returns if reservation associated with the task is in pending state.
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isPending(task: ITask): boolean;
    /**
     * Returns if reservation associated with the task is in pending state.
     *
     * @ignore
     * @returns {boolean}
     */
    get isPending(): boolean;
    /**
     * Returns if reservation associated with the task is in wrapping state.
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isInWrapupMode(task: ITask): boolean;
    /**
     * Returns if reservation associated with the task is in wrapping state.
     *
     * @ignore
     * @returns {boolean}
     */
    get isInWrapupMode(): boolean;
    /**
     * Returns if reservation associated with the task is in completed state.
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isCompleted(task: ITask): boolean;
    /**
     * Returns if reservation associated with the task is in completed state.
     *
     * @ignore
     * @returns {boolean}
     */
    get isCompleted(): boolean;
    /**
     * Returns if reservation associated with the task is assigned to the current user.
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isMyTask(task: ITask): boolean;
    /**
     * Returns if reservation associated with the task is assigned to the current user.
     *
     * @ignore
     * @returns {boolean}
     */
    get isMyTask(): boolean;
    /**
     * Returns a task which is associated with provided chat channel sid
     *
     * @static
     * @param {string} channelSid chat channel sid
     * @returns {ITask}
     */
    static getTaskFromChannelSid(channelSid: string): ITask | undefined;
    /**
     * Returns task by reservation sid
     *
     * @static
     * @param {string} reservationSid reservation sid
     * @returns {ITask}
     */
    static getTaskByTaskSid(taskSid: string): ITask;
    /**
     * Returns true if task is not pending
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isTaskAccepted(task: ITask): boolean;
    /**
     * Returns true if task is not pending.
     *
     * @ignore
     * @returns {boolean}
     */
    get isTaskAccepted(): boolean;
    /**
     * Returns true if task is as outbound call task
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isOutboundCallTask(task: ITask): boolean;
    /**
     * Returns true if the task is initial pending attempt for outbound call
     *
     * @static
     * @param {ITask} task
     * @returns {boolean}
     */
    static isInitialOutboundAttemptTask(task: ITask): boolean;
    /**
     * Returns true if customer is online, false if not.
     *
     * @ignore
     * @returns {boolean}
     */
    get isCustomerOnline(): boolean;
}
