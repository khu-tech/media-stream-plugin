import { ParticipantType } from "@twiliointernal/cbm-sdk";
import { Reservation, Worker } from "twilio-taskrouter";
import { ITask, IWorker, TaskTransfer } from "./CommonModels";
/**
 * @private
 */
export declare class TaskRouterTask implements ITask {
    private _task;
    private _reservation;
    private _incomingTransferObject;
    private _outgoingTransferObject;
    constructor(reservation: Reservation);
    get source(): any;
    get sourceObject(): Reservation;
    get addOns(): any;
    get age(): any;
    get attributes(): any;
    get dateCreated(): any;
    get dateUpdated(): any;
    get priority(): any;
    get queueName(): any;
    get queueSid(): any;
    get reason(): any;
    get sid(): string;
    get taskSid(): any;
    get status(): import("./CommonModels").TaskReservationStatus;
    get taskStatus(): any;
    get taskChannelSid(): any;
    get taskChannelUniqueName(): any;
    get timeout(): any;
    get workflowName(): any;
    get workflowSid(): any;
    get workerSid(): string;
    get routingTarget(): any;
    get defaultFrom(): any;
    get channelType(): any;
    get incomingTransferObject(): TaskTransfer;
    get outgoingTransferObject(): TaskTransfer;
    get conference(): import("../state/Conferences").Conference;
    transfer: (to: string, options: any) => any;
    setAttributes: (attributes: object) => any;
    wrapUp: () => any;
    complete: () => any;
    hold: (holdUrl?: string, holdMethod?: string) => any;
    unhold: () => any;
    holdParticipant: (targetSid: string, holdMusicUrl?: string, holdMusicMethod?: string) => any;
    unholdParticipant: (targetSid: string) => any;
    kick: (targetSid: string) => any;
    cancelTransfer: () => any;
    addVoiceParticipant: (from: string, to: string, type: ParticipantType) => Promise<import("@twiliointernal/cbm-sdk").AddVoiceParticipantResponse>;
    endConference: () => Promise<import("@twiliointernal/cbm-sdk").EndConferenceResponse>;
    setEndConferenceOnExit(participantSid: string, endConferenceOnExit: boolean): Promise<import("@twiliointernal/cbm-sdk").ParticipantResponse>;
    getChannels(): Promise<import("@twiliointernal/cbm-sdk").CbmChannel[]>;
    getParticipants(channelSid: string): Promise<import("@twiliointernal/cbm-sdk").CbmParticipant[]>;
}
/**
 * @private
 */
export declare class TaskRouterWorker implements IWorker<Worker> {
    private _source;
    constructor(source: Worker);
    get source(): Worker;
    get sid(): string;
    get name(): string;
    get fullName(): any;
    get activityName(): any;
    get attributes(): any;
    get dateUpdated(): any;
    get isAvailable(): boolean;
    get activityDuration(): string;
}
