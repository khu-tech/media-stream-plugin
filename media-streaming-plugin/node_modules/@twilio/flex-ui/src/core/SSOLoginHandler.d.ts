/// <reference types="node" />
import { EventEmitter } from "events";
import { SSOConfig } from "../state/AppConfig";
import { SSOTokenPayload } from "./TokenStorage";
export { SSOConfig };
export declare const LOGIN_WINDOW_NAME = "twilioFlexLoginWindow";
export declare const LOGIN_SUCCESSFUL_MESSAGE = "TWILIO_FLEX_LOGIN_SUCCESSFUL";
export declare class SSOLoginHandler extends EventEmitter {
    static create(config?: SSOConfig): Promise<SSOLoginHandler>;
    /**
     * Tries to log in with provided information. Does not initialize token expiration checker.
     * @param config SSO configuration object
     */
    static tryLogin(config?: SSOConfig): Promise<boolean>;
    /**
     * Validates configuration object and throws in case of any error.
     * @throws ConfigError if sso or accountSid are missing
     *
     * @param config configuration object
     *
     */
    static tryValidateConfig(config: SSOConfig): Promise<void>;
    private static tryLoginInNewWindow;
    private static openLoginWindow;
    private _config;
    private constructor();
    getTokenInfo(): SSOTokenPayload | undefined;
    static getTokenInfo(): SSOTokenPayload | undefined;
    logout(): void;
    private initialize;
    private initialiseActiveToken;
    private getAccountSid;
    private static isInLoginWindow;
    private listenForExternalTokenChange;
    private externalTokenChangeCallback;
}
