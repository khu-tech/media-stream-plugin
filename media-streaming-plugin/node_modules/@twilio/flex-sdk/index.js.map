{"version":3,"sources":["webpack://@twilio/flex-sdk/webpack/bootstrap","webpack://@twilio/flex-sdk/./src/modules/error/InternalError/InternalError.ts","webpack://@twilio/flex-sdk/external \"inversify\"","webpack://@twilio/flex-sdk/./src/utils/extractFromPath.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.to-string.js\"","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LogEntry.ts","webpack://@twilio/flex-sdk/./src/modules/config/index.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.iterator.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.iterator.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/web.dom-collections.iterator.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.promise.js\"","webpack://@twilio/flex-sdk/./src/modules/websocket/index.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/telemetry.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.weak-map.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol.description.js\"","webpack://@twilio/flex-sdk/external \"regenerator-runtime/runtime.js\"","webpack://@twilio/flex-sdk/./src/modules/client/Client/ClientEvent.ts","webpack://@twilio/flex-sdk/./src/backend/backend.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/config/config.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/session/Session/SessionEvent.ts","webpack://@twilio/flex-sdk/./src/modules/error/ErrorCode/ErrorCodes.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventGroup.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventName.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventSource.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkClient/TelemetrySDKSessionData.ts","webpack://@twilio/flex-sdk/./src/modules/logger/logger.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/auth/auth.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/events/EventPublisher/EventPublisher.ts","webpack://@twilio/flex-sdk/./src/utils/assert.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/web.dom-collections.for-each.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.concat.js\"","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/ratelimiter.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/websocket.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/error/ErrorCode/InternalErrorCodes.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.keys.js\"","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryClientFactory/createTelemetryClient.ts","webpack://@twilio/flex-sdk/./src/modules/storage/index.ts","webpack://@twilio/flex-sdk/./src/modules/auth/index.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-own-property-descriptor.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol.iterator.js\"","webpack://@twilio/flex-sdk/./src/modules/error/error.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/error/ErrorCode/ErrorCodeHelper.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/TwilsockClient/TwilsockClient.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.function.name.js\"","webpack://@twilio/flex-sdk/./src/utils/processHttpAdapterResponse.ts","webpack://@twilio/flex-sdk/./src/utils/typeGuards.ts","webpack://@twilio/flex-sdk/./src/modules/auth/Authenticator/FederatedAuth/FederatedAuthHelper.ts","webpack://@twilio/flex-sdk/./src/modules/auth/Authenticator/FederatedAuth/FederatedAuth.ts","webpack://@twilio/flex-sdk/./src/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainerImpl.ts","webpack://@twilio/flex-sdk/./src/modules/auth/auth.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/auth/AuthenticatorFactory/createAuthenticator/createAuthenticator.ts","webpack://@twilio/flex-sdk/./src/modules/auth/TwilioIdpUrlFunction/getTwilioIdpUrl.ts","webpack://@twilio/flex-sdk/./src/modules/session/Session/SessionImpl.ts","webpack://@twilio/flex-sdk/./src/utils/getCurrentDate.ts","webpack://@twilio/flex-sdk/./src/modules/session/session.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/client/Client/ClientImpl/ClientImpl.ts","webpack://@twilio/flex-sdk/./src/modules/client/client.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/error/ThrowError/reportError.ts","webpack://@twilio/flex-sdk/./src/modules/error/ThrowError/ErrorHelper.ts","webpack://@twilio/flex-sdk/./src/modules/error/error.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/events/events.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/config/EnvironmentConfig/EnvironmentConfigImpl.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigStore/AccountConfigStore.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigUpdate/updateAccountConfig.ts","webpack://@twilio/flex-sdk/./src/modules/config/config.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfigOptions/getDefaultAccountConfigOptions.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/websocket.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/TwilsockClientFactory/getTwilsockClient.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/rbac.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/rbac.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/HasRole/hasRole.ts","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LoggerImpl/LoggerImpl.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/formatEntry.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logEntryPlugin.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/createLogEntry.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/setContext.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/setData.ts","webpack://@twilio/flex-sdk/./src/modules/logger/logger.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryClient/TelemetryClientImpl/TelemetryClientImpl.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryEventGroup/TelemetryEventGroupImpl/TelemetryEventGroupImpl.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TelemetryRateLimiterOptions.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/telemetry.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryEventGroupFactory/createEventGroup.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/telemetrySdkClient.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/RateLimiter/RateLimiterImpl/RateLimiterImpl.ts","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/ratelimiter.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/storage/ClearCache/clearLocalStorage.ts","webpack://@twilio/flex-sdk/./src/modules/storage/LocalStorage/LocalStorageImpl.ts","webpack://@twilio/flex-sdk/./src/ioc.config.ts","webpack://@twilio/flex-sdk/./src/modules/storage/storage.ioc.ts","webpack://@twilio/flex-sdk/./src/backend/openApi.container.ts","webpack://@twilio/flex-sdk/./src/modules/storage/storage.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.filter.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-own-property-descriptors.js\"","webpack://@twilio/flex-sdk/./src/backend/HttpAdapter/authenticationMethods.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/telemetrySdkClient.rtti.ts","webpack://@twilio/flex-sdk/./src/utils/mapKeys.ts","webpack://@twilio/flex-sdk/./src/modules/session/session.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.map.js\"","webpack://@twilio/flex-sdk/./src/modules/client/client.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/error/FlexSdkError/FlexSdkError.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.includes.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.includes.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.exec.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-prototype-of.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.to-string.js\"","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LoggerName.ts","webpack://@twilio/flex-sdk/external \"events\"","webpack://@twilio/flex-sdk/./src/modules/events/events.rtti.ts","webpack://@twilio/flex-sdk/external \"loglevel\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.slice.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.reflect.construct.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.replace.js\"","webpack://@twilio/flex-sdk/./src/modules/error/ErrorSeverity/ErrorSeverity.ts","webpack://@twilio/flex-sdk/./src/modules/storage/LocalStorage/LocalStorageKeys.ts","webpack://@twilio/flex-sdk/external \"lodash/cloneDeep\"","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/index.ts","webpack://@twilio/flex-sdk/./src/utils/retry/retry.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/TwilsockReplyError.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.reduce.js\"","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/TwilsockEvent.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.from.js\"","webpack://@twilio/flex-sdk/./src/backend/generated/FederatedAuth/model/role.ts","webpack://@twilio/flex-sdk/./src/modules/session/SessionOptions/defaultSessionOptions.ts","webpack://@twilio/flex-sdk/./src/modules/client/ClientProvider/createClient.ts","webpack://@twilio/flex-sdk/./src/modules/client/ClientOptions/ClientOptionsStore.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfigDataGetter/getAccountConfigData.ts","webpack://@twilio/flex-sdk/./src/modules/config/FeaturesConfigDataGetter/getFeaturesConfig.ts","webpack://@twilio/flex-sdk/./src/modules/logger/LoggerFactory/getLogger.ts","webpack://@twilio/flex-sdk/./src/modules/logger/DefaultLoggerLevel/defaultLoggerLevel.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryOptions/getDefaultTelemetryOptions.ts","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/cleanupRateLimiters/cleanupRateLimiters.ts","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/RateLimiterFactory/createRateLimiter/createRateLimiter.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Telemetry/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Configuration/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Features/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/backend/generated/FederatedAuth/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/backend/TwilsockAdapter/TwilsockAdapterImpl.ts","webpack://@twilio/flex-sdk/./src/backend/HttpAdapter/HttpAdapterImpl.ts","webpack://@twilio/flex-sdk/external \"lodash/camelCase\"","webpack://@twilio/flex-sdk/external \"lodash/snakeCase\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.values.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.number.constructor.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.trim.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.match.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.map.js\"","webpack://@twilio/flex-sdk/external \"twilsock\"","webpack://@twilio/flex-sdk/./src/utils/mergeUserOptions.ts","webpack://@twilio/flex-sdk/external \"lodash/mergeWith\"","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfigProvider/AccountConfigProvider.ts","webpack://@twilio/flex-sdk/./src/modules/config/PublicConfigProvider/getPublicConfig.ts","webpack://@twilio/flex-sdk/external \"lodash/mapKeys\"","webpack://@twilio/flex-sdk/external \"lodash/transform\"","webpack://@twilio/flex-sdk/./src/modules/config/FeaturesProvider/featuresProviderImpl/featuresProviderImpl.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/TwilsockImpl.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/RequiredRole/requiredRole.ts","webpack://@twilio/flex-sdk/./node_modules/loglevel/lib/loglevel.js","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TwilioEventProcessor/TwilioTelemetryProcessor.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TwilioEventProcessor/toSdkBackendEvent.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Telemetry/api/telemetry.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Configuration/api/configuration.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Features/api/features.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/FederatedAuth/api/federatedAuth.service.ts","webpack://@twilio/flex-sdk/./src/utils/defaultRetryConditionOnFlexSdkError.ts","webpack://@twilio/flex-sdk/external \"reflect-metadata\"","webpack://@twilio/flex-sdk/./src/ioc.helper.ts","webpack://@twilio/flex-sdk/./src/index.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.find.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.number.is-nan.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.ends-with.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.constructor.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.entries.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.starts-with.js\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","InternalError","_Error","_inherits","_super","_this","message","arguments","length","undefined","_classCallCheck","this","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","Error","require","extractModuleFromPath","path","match","replace","extractFileNameFromPath","Severity","LogEntry","loggerName","severity","Debug","timestamp","Date","context","_config_rtti__WEBPACK_IMPORTED_MODULE_0__","__webpack_exports__","_websocket_rtti__WEBPACK_IMPORTED_MODULE_0__","_Twilsock_TwilsockEvent__WEBPACK_IMPORTED_MODULE_1__","telemetryClientRTTI","for","telemetryClientFactoryRTTI","telemetryEventGroupRTTI","telemetryEventGroupFactoryRTTI","telemetryProcessorRTTI","telemetryOptionsRTTI","telemetryRateLimiterOptionsRTTI","ClientEvent","twilsockAdapterRTTI","httpAdapterRTTI","telemetryServiceRTTI","configurationServiceRTTI","featuresServiceRTTI","federatedAuthServiceRTTI","environmentConfigRTTI","accountConfigRTTI","configDataContainerRTTI","accountConfigProviderRTTI","accountConfigUpdaterRTTI","publicConfigProviderRTTI","publicConfigMockOptionsRTTI","featuresProviderRTTI","getFeaturesConfigRTTI","getAccountConfigRTTI","accountConfigOptionsRTTI","SessionEvent","ErrorCode","publicErrorDetails","_defineProperty","_publicErrorDetails","PermissionDeniedError","InvalidAccessToken","AccessTokenExpired","TooManyRequests","AuthorizationError","ValidationError","ConnectionError","SDK","Unknown","Forbidden","InvalidParams","NotFound","InvalidState","TooManySDKRequests","TemporarilyDisabled","NetworkError","TwilsockConnectionError","BadRequest","InvalidCertificate","DownstreamServiceError","debuggerErrorCodes","TelemetrySdkEventGroup","TelemetrySdkEventName","TelemetrySdkEventSource","SDKDependency","loggerFactoryRTTI","newableLoggerRTTI","loglevelFactoryRTTI","defaultPluginsRTTI","loggerOptionsRTTI","loggerInstancesRTTI","authenticatorRTTI","authenticatorDataContainerRTTI","authenticatorFactoryRTTI","twilioIdpUrlRTTI","twilioIdpUrlMockOptionsRTTI","authenticatorMockOptionsRTTI","proxyEvent","from","to","event","alias","addListener","_len","args","Array","_key","emit","apply","concat","assertObject","_typeof","isArray","metadata","__dirname","ErrorSeverity","source","__filename","FlexSdkError","assertNotCircularObject","JSON","stringify","err","test","hasCycles","assertString","assertNotEmptyString","trim","assertKeyInObject","rateLimiterRTTI","rateLimiterMapRTTI","rateLimiterFactoryRTTI","cleanupRateLimitersRTTI","newableTwilsockClientRTTI","productIdRTTI","twilsockRTTI","twilsockClientFactoryRTTI","InternalErrorCode","internalErrorDetails","_internalErrorDetails","SyncConnectionError","SyncAccessForbiddenError","SyncMapNotFoundError","SyncInvalidMapItemDataError","SyncInvalidMapItemKeyError","SyncMapItemNotFoundError","SyncNameNotFoundError","SyncNameAlreadyExistsError","SyncInvalidNameError","createTelemetryClient","container","telemetryClient","_storage_rtti__WEBPACK_IMPORTED_MODULE_0__","_LocalStorage_LocalStorageKeys__WEBPACK_IMPORTED_MODULE_1__","_auth_rtti__WEBPACK_IMPORTED_MODULE_0__","_backend_generated_FederatedAuth_model_role__WEBPACK_IMPORTED_MODULE_1__","reThrowErrorWithCustomMessageRTTI","throwErrorRTTI","throwAndReportErrorRTTI","throwErrorFromErrorResponseRTTI","throwErrorFromResponseRTTI","internalToPublicErrorMap","Map","isInternalErrorCode","errorCode","values","find","code","isKnownErrorCode","isPublicErrorCode","isDebuggerErrorCode","includes","getMessage","getPublicErrorCodeMessage","getInternalErrorCodeMessage","getPublicErrorCode","internalErrorCode","isDownstreamErrorCode","TwilsockClientEvent","twilsock__WEBPACK_IMPORTED_MODULE_0__","convertDateStringValuesToDate","response","dateRegex","dateKeyRegex","RegExp","processedResponse","entries","forEach","_ref","_ref2","_slicedToArray","hasKey","getSSOLoginRequestBody","config","products","resource","redirectUrl","FederatedAuth","injectable","_dec","_authenticatorDataContainer","WeakMap","_logger","_federatedAuthService","_class","authenticatorDataContainer","getLogger","federatedAuthService","set","writable","_classPrivateFieldSet","LoggerName","Auth","_refreshToken","_validateToken","_getIdpUrl","inject","_asyncToGenerator","regeneratorRuntime","mark","_callee","payload","accountSid","data","wrap","_context","prev","next","FederatedAuthHelper","_classPrivateFieldGet","getIdpUrl","sent","location","error","abrupt","stop","_x","_callee2","token","tokenData","_context2","validateToken","roles","valid","dateExpired","expiration","identity","_x2","_callee3","tokenRefreshResult","_context3","refreshToken","_x3","AuthenticatorDataContainerImpl","AuthenticatorDataContainerImpl_dec","_accountSid","AuthenticatorDataContainerImpl_class","AuthenticatorDataContainerImpl_classCallCheck","AuthenticatorDataContainerImpl_classPrivateFieldSet","authModuleContainer","ContainerModule","inSingletonScope","toFactory","createAuthenticator","toDynamicValue","port","twilioServiceLoginUrl","getTwilioIdpUrl","SessionImpl","SessionImpl_dec","_accountConfig","_authFactory","_token","_tokenExpiration","_connection","_options","_accountConfigProvider","_roles","_identity","_isActive","SessionImpl_logger","_needsToAutoUpdateToken","_emitter","_verificationInterval","_verifyToken","_isTokenCloseToExpiry","_handleTokenAboutToExpire","_autoUpdateToken","SessionImpl_class","connection","options","authFactory","accountConfigProvider","emitter","_value","_value2","_value3","SessionImpl_classCallCheck","SessionImpl_asyncToGenerator","SessionImpl_classPrivateFieldGet","now","getTime","SessionImpl_classPrivateFieldSet","newToken","newTokenDateExpired","auth","debug","warn","TokenMaxLifetimeReached","t0","TokenAutoUpdateFailed","trace","updateToken","info","t1","Session","_destroy","_updateToken","_init","eventEmitterRTTI","sessionOptionsRTTI","_callee4","_this2","_context4","autoUpdateToken","connect","TwilsockEvent","TokenAboutToExpire","t2","t3","setInterval","Promise","resolve","_callee5","_context5","_callee6","_context6","clearInterval","removeListener","destroy","eventName","listener","on","sessionModuleContainer","sessionRTTI","toConstantValue","getDefaultSessionOptions","ClientImpl","ClientImpl_dec","_dec2","postConstruct","_session","ClientImpl_connection","ClientImpl_logger","_telemetryClientFactory","_telemetrySdkClient","ClientImpl_emitter","_cleanupRateLimiters","_sendDestroyEvent","_class2","session","account","telemetryClientFactory","_telemetrySdkClient2","cleanupRateLimiters","ClientImpl_classCallCheck","ClientImpl_asyncToGenerator","telemetrySdkClient","group","ClientImpl_classPrivateFieldGet","createEventGroup","Default","addEvents","ClientDestroyed","eventSource","Client","ClientImpl_classPrivateFieldSet","telemetrySdkClientRTTI","TokenExpired","TokenUpdated","ConnectionLost","Connected","ConnectionRestored","Disconnected","removeAllListeners","_toConsumableArray","getOwnPropertyDescriptor","ClientImpl_class","clientModuleContainer","clientOptionsRTTI","ClientOptionsStore","clientRTTI","clientProviderRTTI","toProvider","userOptions","createClient","_wrappedError$message","errorEventGroup","wrappedError","debuggerFlag","loggerFactory","telemetrySdkErrorEventGroupRTTI","addErrorEvent","debugger","reporter","resourceSid","stackTrace","stack","unhandled","wrappedErrorCode","wrappedErrorMessage","createFlexSdkError","console","publicErrorCode","throwFlexSdkError","throwAndReportFlexSdkError","errorToThrow","_reportError","reportError","reThrowFlexSdkErrorWithCustomMessage","customMessage","throwFlexSdkErrorFromErrorResponse","errorResponse","json","errorModuleContainer","_throwFlexSdkErrorFromResponse","throwFlexSdkErrorFromResponse","eventsModuleContainer","EventEmitter","getEnvironmentConfig","_window$__TWILIO_FLEX","_objectSpread","window","__TWILIO_FLEX_SDK__","environmentConfig","AccountConfigStore","AccountConfigStore_dec","_dataContainer","_accountConfigUpdater","_currentUpdateConfigPromise","AccountConfigStore_class","dataContainer","updater","AccountConfigStore_classCallCheck","AccountConfigStore_classPrivateFieldSet","_set","AccountConfigStore_classPrivateFieldGet","dataWithoutAccountSid","updateConfigCall","updatedConfigData","_objectWithoutProperties","_excluded","keys","map","updateInCallOrder","then","updateAccountConfig","configurationService","updatedConfiguration","updateConfiguration","updateAccountConfig_objectSpread","configModuleContainer","AccountConfigDataContainer","option","getPublicConfig","featuresProviderImpl","getFeaturesConfig","getAccountConfigData","query","UiVersion","websocketModuleContainer","toConstructor","TwilsockSdkClient","TwilsockImpl","productId","getTwilsockClient","rbacRTTI","rbacModuleContainer","requiredRole","hasRole","role","LoggerImpl","LoggerImpl_dec","_loglevel","LoggerImpl_class","loglevel","LoggerImpl_classCallCheck","LoggerImpl_defineProperty","_classPrivateFieldGet2","LoggerImpl_classPrivateFieldGet","_classPrivateFieldGet3","_classPrivateFieldGet4","_classPrivateFieldGet5","_classPrivateFieldGet6","_classPrivateFieldGet7","level","setLevel","getLevel","LoggerImpl_classPrivateFieldSet","toTwoDigits","number","formatDate","date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","miliseconds","getMilliseconds","factories","originalFactory","methodName","logLevel","firstParam","isLogEntry","messages","unshift","logEntry","method","toUpperCase","messagePrefix","reverse","logEntryPlugin","f","methodFactory","loggerModuleContainer","getLoglevel","getDefaultLoggerOptions","TelemetryClientImpl","TelemetryClientImpl_dec","_eventGroupFactory","TelemetryClientImpl_logger","TelemetryClientImpl_class","eventGroupFactory","TelemetryClientImpl_classCallCheck","TelemetryClientImpl_classPrivateFieldSet","TelemetryLoggerName","TelemetryClient","_setSessionData","TelemetryClientImpl_classPrivateFieldGet","sessionData","TelemetryEventGroupImpl","TelemetryEventGroupImpl_dec","_processor","TelemetryEventGroupImpl_options","TelemetryEventGroupImpl_connection","TelemetryEventGroupImpl_class","processor","telemetryOptions","twilsock","TelemetryEventGroupImpl_classCallCheck","TelemetryEventGroupImpl_classPrivateFieldSet","_addErrorEvent","_addEvents","TelemetryEventGroupImpl_asyncToGenerator","events","_args","TelemetryEventGroupImpl_classPrivateFieldGet","processEvents","errorEvent","isWebsocketAvailable","isConnected","reportErrors","eventsSucceeded","eventsFailed","eventsNotProcessed","telemetryRateLimiterOptions","timeWindow","maxHitsInTimeWindow","disableFeatureThreshold","telemetryModuleContainer","eventGroup","TwilioTelemetryProcessor","getDefaultTelemetryOptions","telemetrySdkClientModuleContainer","defaultOptions","rateLimiterErrorCode","disableFeatureErrorCode","Number","MAX_VALUE","RateLimiterImpl","RateLimiterImpl_dec","RateLimiterImpl_options","_hitCountInTimeWindow","_rateLimitExceededCount","_resetTimeIntervalHandle","_telemetryEventGroup","RateLimiterImpl_logger","_throwError","_resetHitCountInTimeWindow","_increaseHitCountInTimeWindow","_increaseExceededCountOnFirstTimeWindowLimitHit","_throwRateLimitErrorIfNeeded","_reportRateLimitErrorIfNeeded","_reportRateLimitHit","_reportRateLimiterDisabledFeature","RateLimiterImpl_class","throwError","RateLimiterImpl_classCallCheck","RateLimiterImpl_classPrivateFieldSet","RateLimiterImpl_classPrivateFieldGet","hitCountInTimeWindow","RateLimiterTriggered","RateLimiter","id","RateLimiterDisabledFeature","rateLimiterModuleContainer","createRateLimiter","clearLocalStorage","Storage","LocalStorageKeys","localStorage","removeItem","singletonContainer","LocalStorageImpl","LocalStorageImpl_dec","LocalStorageImpl_logger","LocalStorageImpl_class","LocalStorageImpl_classCallCheck","LocalStorageImpl_classPrivateFieldSet","serializedItem","getItem","item","parse","expiry","LocalStorageImpl_classPrivateFieldGet","setItem","storageModuleContainer","localStorageRTTI","clearCacheRTTI","createContainer","Container","load","TwilsockAdapterImpl","HttpAdapterImpl","TelemetryBinder","with","ConfigurationServiceBinder","FeaturesBinder","FederatedAuthBinder","withContainer","getSingletonContainer","AuthenticationMethod","makeAuthenticationHeaders","_modules_error__WEBPACK_IMPORTED_MODULE_0__","Basic","Headers","Authorization","btoa","Content-Type","HostedFlex","x-flex-jwe","mapArrayKeys","cb","newArray","newValue","mapAllKeys","push","transform","result","mapRootKeysTo","mapkeys","_","mapRootKeysToSnakeCase","snakecase","mapRootKeysToCamelCase","camelcase","mapAllKeysToSnakeCase","clientMockOptionsRTTI","details","_details","_errorCode","_wrappedError","_metadata","SdkLoggerName","_modules_ratelimiter_ratelimiter_rtti__WEBPACK_IMPORTED_MODULE_0__","calculateNextDelay","retryCount","initialDelay","backoff","Math","pow","retry","_retry","maxDelay","maxAttempts","errorToReturn","_loop","_ret","delay","logger","functionToRetry","v","retryCondition","reject","setTimeout","delegateYield","TwilsockReplyError","isTwilsockReplyError","hasReply","hasStatus","reply","hasCode","status","Role","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_0__","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_0___default","defaultSessionOptions","cloneDeep","sendClientInitEvent","durationInMs","ClientInitialized","durationMs","_x4","_x5","_x6","_createClient","t0Ms","clientOptions","throwErrorFromErrorResponse","telemetrySessionData","client","mergeUserOptions","init","dependencies","Twilsock","setSessionData","_telemetry","_region","_appName","_appVersion","telemetry","accountConfig","_data","sessionToken","configProvider","sdkLoggerNameToLoglevel","twilsockLoglevel","loggers","defaultLevel","loglevelFactory","plugins","getSdkLoglevel","reduce","instance","plugin","defaultLoggerOptions","rateLimiters","cleanup","clear","rateLimiter","setup","ApiServiceBinder","TelemetryServiceImpl","ConfigurationServiceImpl","FeaturesServiceImpl","FederatedAuthServiceImpl","_twilsock","twilsockInjected","_post","url","body","post","_throwErrorFromResponse","_mapStatusCodeToFlexSdkErrorCode","_handleErrorResponse","_performNetworkCallOnce","_getToken","envConfig","throwErrorFromResponse","statusCode","flexSdkErrorCode","authMethod","environmentSpecificUrl","getEnvironmentSpecificUrl","fetch","getRequestData","mapBody","ok","_performNetworkCall","performNetworkCall","headers","urlEnvSpecifier","region","startsWith","defaultRetryConditionOnFlexSdkError","_x7","_x8","_x9","_x10","_x11","mergeWith","_srcValue","_object","_source","objectHasKey","objectHasGetterForKey","getPrototypeOf","_clientOptions$accoun","_options$query","throwAndReportError","storage","configData","uiVersion","cachedConfig","Config","fetchConfiguration","setCachedItem","AccountConfig","getCachedItem","dateCreated","dateUpdated","RUNTIME_DOMAIN_REGEXP","getPublicConfigQueryParam","isAccountSidOption","paramName","paramValue","domain","sanitizedDomain","endsWith","parsedRuntimeDomain","sanitizeRuntimeDomain","runtimeDomain","_getPublicConfig","queryParam","responseData","fetchPublicConfiguration","PublicConfig","configurations","featuresService","featuresData","cachedFeatures","fetchFeatures","FeaturesConfig","_productId","_twilsockClientFactory","_environmentConfig","_clientOptions","_throwErrorFromErrorResponse","_proxyTwilsockClientEvent","_proxyEventsFromTwilsockClient","_proxyLogsFromTwilsockClient","_listenAndEmitConnectionError","_isConnectionError","_isTooManyRequestsError","_isServerError","_retryOnTooManyErrorOrConnectionErrorOrServerError","_updateTokenOnce","_waitUntilConnectedOrRejected","twilsockClientFactory","getRawTwilsockClient","StateChanged","twilsockLogger","flexError","twilsockClient","successHandler","connectionErrorHandler","removeConnectionListeners","_connect","clientMetadata","type","sdk","sdkv","version","app","appName","appv","appVersion","_error$body","_error$body2","connectionDestroyed","disconnect","target","propertyKey","descriptor","originalMethod","currentRoles","wrongRole","toString","root","definition","__WEBPACK_AMD_DEFINE_RESULT__","define","noop","isIE","navigator","userAgent","logMethods","bindMethod","obj","Function","e","traceForIE","log","realMethod","replaceLoggingMethods","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","factory","currentLevel","self","storageKey","getPersistedLevel","storedLevel","ignore","cookie","document","indexOf","encodeURIComponent","exec","slice","levels","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","TypeError","_log","noConflict","getLoggers","__WEBPACK_AMD_DEFINE_FACTORY__","_telemetryService","_isTelemetryDisabled","_throwAndReportError","_rateLimiterFactory","_rateLimiterOptions","_sendTelemetryEvents","_getRateLimiter","telemetryService","rateLimiterFactory","rateLimiterOptions","payloadType","stats","_yield$_classPrivateF","_error$wrappedError","number_of_successful_events","number_of_failed_events","check","postTelemetryEvents","TelemetryProcessor","_processEvents","groupName","_len2","_key2","backendEvents","backendEventsBatch","arrayOfPromises","batchResults","_args2","toSdkBackendEvents","all","acc","batch","toBackendEvent","mappedSessionData","mappedEventData","client_timestamp","toISOString","event_group","payload_type","twilsockAdapter","_postTelemetryEvents","basePath","httpAdapter","_updateConfiguration","_fetchPublicConfiguration","_fetchConfiguration","queryParamName","queryParamValue","String","accountConfigData","_fetchFeatures","sSOLoginRequestBody","flexSdkError","createPureFactory","containerCreator","serviceIdentifier","provider","getAccountConfig","clearCache","packageVersion"],"mappings":"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","file":"index.js","sourcesContent":[" \t\n \tvar installedModules = {};\n\n \t\n \tfunction __webpack_require__(moduleId) {\n\n \t\t\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t\n \t\tmodule.l = true;\n\n \t\t\n \t\treturn module.exports;\n \t}\n\n\n \t\n \t__webpack_require__.m = modules;\n\n \t\n \t__webpack_require__.c = installedModules;\n\n \t\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t\n \t\n \t\n \t\n \t\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t\n \t__webpack_require__.p = \"\";\n\n\n \t\n \treturn __webpack_require__(__webpack_require__.s = 119);\n","\n\n\n\nexport class InternalError extends Error {\n    constructor(message: string = \"Internal Error\") {\n        super(message);\n        Object.setPrototypeOf(this, InternalError.prototype);\n    }\n}\n","module.exports = require(\"inversify\");","export function extractModuleFromPath(path: string): string {\n    const regex = \"/modules/[A-z]+\";\n    const match = path.match(regex);\n\n    const module = match ? match[0].replace(\"/modules/\", \"\") : \"\";\n    return module;\n}\n\nexport function extractFileNameFromPath(path: string): string {\n    const regex = \"([A-z])+([.]*[A-z]*)[.][jt]s\";\n    const match = path.match(regex);\n\n    const fileName = match ? match[0] : \"\";\n    return fileName;\n}\n","module.exports = require(\"core-js/modules/es.object.to-string.js\");","\n\n\nexport enum Severity {\n    Trace = \"trace\",\n    Debug = \"debug\",\n    Info = \"info\",\n    Warn = \"warn\",\n    Error = \"error\"\n}\n\nexport class LogEntry {\n    constructor(loggerName: string, severity: Severity = Severity.Debug) {\n        this.loggerName = loggerName;\n        this.severity = severity;\n        this.timestamp = new Date();\n        this.context = {};\n    }\n\n    readonly loggerName: string;\n\n    readonly timestamp: Date;\n\n    readonly severity: Severity;\n\n    data: unknown[];\n\n    errorCode?: number;\n\n    readonly context?: {\n        sessionId?: string;\n        userSid?: string;\n        resourceSid?: string;\n        stack?: string;\n    };\n}\n","export type { AccountConfig, AccountConfigKeys } from \"./AccountConfig/AccountConfig\";\nexport type { AccountConfigProvider } from \"./AccountConfigProvider/AccountConfigProvider\";\nexport type { AccountConfigDataGetter } from \"./AccountConfigDataGetter/AccountConfigDataGetter\";\nexport type { AccountConfigData } from \"~/backend/generated/Configuration/model/accountConfigData\";\nexport type { IntegrationsConfig } from \"~/backend/generated/Configuration/model/integrationsConfig\";\nexport type { OutboundFlows } from \"~/backend/generated/Configuration/model/outboundFlows\";\nexport type { SkillDefinition } from \"~/backend/generated/Configuration/model/skillDefinition\";\nexport type { QueueStatsConfiguration } from \"~/backend/generated/Configuration/model/queueStatsConfiguration\";\nexport type { TaskQueue } from \"~/backend/generated/Configuration/model/taskQueue\";\nexport type { WorkerChannel } from \"~/backend/generated/Configuration/model/workerChannel\";\nexport type { DefaultQueueStatsConfiguration } from \"~/backend/generated/Configuration/model/defaultQueueStatsConfiguration\";\nexport type { QueueConfiguration } from \"~/backend/generated/Configuration/model/queueConfiguration\";\nexport type { QueueChannelConfiguration } from \"~/backend/generated/Configuration/model/queueChannelConfiguration\";\nexport type { ChannelConfig } from \"~/backend/generated/Configuration/model/channelConfig\";\nexport type { CbmAttachments } from \"~/backend/generated/Configuration/model/cbmAttachments\";\n\nexport type { EnvironmentConfig } from \"./EnvironmentConfig/EnvironmentConfig\";\nexport {\n    accountConfigRTTI,\n    accountConfigProviderRTTI,\n    environmentConfigRTTI,\n    publicConfigProviderRTTI,\n    configDataContainerRTTI,\n    featuresProviderRTTI,\n    getAccountConfigRTTI,\n    getFeaturesConfigRTTI,\n    accountConfigOptionsRTTI\n} from \"./config.rtti\";\nexport type {\n    PublicConfigProvider,\n    AccountSidOption,\n    RuntimeDomainOption\n} from \"./PublicConfigProvider/PublicConfigProvider\";\n\nexport type { PublicConfig } from \"~/backend/generated/Configuration/model/publicConfig\";\nexport type { PublicConfigAttributes } from \"~/backend/generated/Configuration/model/publicConfigAttributes\";\n\nexport type { FeaturesProvider, FeaturesConfig, FeaturesList } from \"./FeaturesProvider/FeaturesProvider\";\nexport type { FeaturesConfigDataGetter } from \"./FeaturesConfigDataGetter/FeaturesConfigDataGetter\";\n\nexport type { AccountConfigOptions } from \"./AccountConfigOptions/AccountConfigOptions\";\n","module.exports = require(\"core-js/modules/es.array.iterator.js\");","module.exports = require(\"core-js/modules/es.string.iterator.js\");","module.exports = require(\"core-js/modules/web.dom-collections.iterator.js\");","module.exports = require(\"core-js/modules/es.symbol.js\");","module.exports = require(\"core-js/modules/es.promise.js\");","export { twilsockRTTI } from \"./websocket.rtti\";\nexport type { Twilsock, TwilsockResult, Headers } from \"./Twilsock/Twilsock\";\nexport { TwilsockEvent } from \"./Twilsock/TwilsockEvent\";\n","export const telemetryClientRTTI = Symbol.for(\"TelemetryClient\");\nexport const telemetryClientFactoryRTTI = Symbol.for(\"TelemetryClientFactory\");\nexport const telemetryEventGroupRTTI = Symbol.for(\"TelemetryEventGroup\");\nexport const telemetryEventGroupFactoryRTTI = Symbol.for(\"TelemetryEventGroupFactory\");\nexport const telemetryProcessorRTTI = Symbol.for(\"TelemetryProcessor\");\nexport const telemetryOptionsRTTI = Symbol.for(\"TelemetryOptions\");\nexport const telemetryRateLimiterOptionsRTTI = Symbol.for(\"TelemetryRateLimiterOptions\");\n","module.exports = require(\"core-js/modules/es.weak-map.js\");","module.exports = require(\"core-js/modules/es.symbol.description.js\");","module.exports = require(\"regenerator-runtime/runtime.js\");","\n\n\nexport enum ClientEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    TokenUpdated = \"tokenUpdated\",\n    TokenAutoUpdateFailed = \"tokenAutoUpdateFailed\",\n    TokenMaxLifetimeReached = \"tokenMaxLifetimeReached\",\n    ConnectionLost = \"connectionLost\",\n    ConnectionRestored = \"connectionRestored\",\n    Disconnected = \"disconnected\"\n}\n","export const twilsockAdapterRTTI = Symbol.for(\"TwilsockAdapter\");\nexport const httpAdapterRTTI = Symbol.for(\"HttpAdapter\");\nexport const telemetryServiceRTTI = \"TelemetryService\";\nexport const workspaceStatsServiceRTTI = \"WorkspaceStatsService\";\nexport const configurationServiceRTTI = \"ConfigurationService\";\nexport const featuresServiceRTTI = \"FeaturesService\";\nexport const federatedAuthServiceRTTI = \"FederatedAuthService\";\n","export const environmentConfigRTTI = Symbol.for(\"EnvironmentConfig\");\nexport const accountConfigRTTI = Symbol.for(\"AccountConfig\");\nexport const accountConfigDataRTTI = Symbol.for(\"AccountConfigData\");\nexport const configDataContainerRTTI = Symbol.for(\"ConfigDataContainer\");\nexport const accountConfigProviderRTTI = Symbol.for(\"AccountConfigProvider\");\nexport const accountConfigUpdaterRTTI = Symbol.for(\"AccountConfigUpdater\");\nexport const publicConfigProviderRTTI = Symbol.for(\"PublicConfigProvider\");\nexport const publicConfigMockOptionsRTTI = Symbol.for(\"PublicConfigMockOptions\");\nexport const featuresProviderRTTI = Symbol.for(\"FeaturesProvider\");\nexport const getFeaturesConfigRTTI = Symbol.for(\"getFeaturesConfig\");\nexport const getAccountConfigRTTI = Symbol.for(\"getAccountConfig\");\nexport const accountConfigOptionsRTTI = Symbol.for(\"AccountConfigOptions\");\n","export enum SessionEvent {\n    TokenMaxLifetimeReached = \"tokenMaxLifetimeReached\",\n    TokenAutoUpdateFailed = \"tokenAutoUpdateFailed\"\n}\n","\n\n\n\nexport enum ErrorCode {\n    \n\n\n    PermissionDeniedError = 20003,\n    \n\n\n    InvalidAccessToken = 20101,\n    \n\n\n    AccessTokenExpired = 20104,\n    \n\n\n    TooManyRequests = 20429,\n    \n\n\n    AuthorizationError = 45003,\n    \n\n\n    ValidationError = 45004,\n    \n\n\n    ConnectionError = 45011,\n    \n\n\n    SDK = 45500,\n    \n\n\n    Unknown = 45501,\n    \n\n\n    Forbidden = 45502,\n    \n\n\n    InvalidParams = 45503,\n    \n\n\n    NotFound = 45504,\n    \n\n\n    InvalidState = 45505,\n    \n\n\n    TooManySDKRequests = 45506,\n    \n\n\n    TemporarilyDisabled = 45507,\n    \n\n\n    NetworkError = 45508,\n    \n\n\n    TwilsockConnectionError = 45511,\n    \n\n\n    DownstreamServiceError = 45512,\n    \n\n\n    BadRequest = 70002,\n    \n\n\n    InvalidCertificate = 70251\n}\n\nexport type PublicErrorInfoMap = { [TKey in ErrorCode]: string };\n\nexport const publicErrorDetails: PublicErrorInfoMap = {\n    [ErrorCode.PermissionDeniedError]:\n        \"PermissionDeniedError: You lack permission to the resource and method you requested\",\n    [ErrorCode.InvalidAccessToken]: \"Invalid Access Token\",\n    [ErrorCode.AccessTokenExpired]: \"Access Token expired or expiration date invalid\",\n    [ErrorCode.TooManyRequests]: \"TooManyRequests: Twilsock rate limit exceeded\",\n    [ErrorCode.AuthorizationError]: \"Attempt to access resource where access is not allowed for given credentials\",\n    [ErrorCode.ValidationError]: \"Validation error: request body validation fails\",\n    [ErrorCode.ConnectionError]: \"Connection error\",\n    [ErrorCode.SDK]: \"Something went wrong, error from inner SDK\",\n    [ErrorCode.Unknown]: \"Unknown error\",\n    [ErrorCode.Forbidden]: \"User is not authorized to perform the requested operation\",\n    [ErrorCode.InvalidParams]: \"Invalid parameters\",\n    [ErrorCode.NotFound]: \"Resource not found\",\n    [ErrorCode.InvalidState]: \"Invalid state\",\n    [ErrorCode.TooManySDKRequests]: \"Too many requests on the Flex SDK API\",\n    [ErrorCode.TemporarilyDisabled]: \"The feature has been temporarily disabled\",\n    [ErrorCode.NetworkError]: \"NetworkError: Not able to reach the server\",\n    [ErrorCode.TwilsockConnectionError]: \"Twilsock connection error\",\n    [ErrorCode.BadRequest]: \"BadRequest: The data in the request is unparsable\",\n    [ErrorCode.InvalidCertificate]: \"Validation error: invalid certificate\",\n    [ErrorCode.DownstreamServiceError]: \"Downstream error\"\n};\n\n\nexport const debuggerErrorCodes: Array<ErrorCode> = [\n    ErrorCode.PermissionDeniedError,\n    ErrorCode.InvalidAccessToken,\n    ErrorCode.AccessTokenExpired,\n    ErrorCode.TooManyRequests,\n    ErrorCode.AuthorizationError,\n    ErrorCode.ValidationError,\n    ErrorCode.BadRequest,\n    ErrorCode.InvalidCertificate\n];\n","export enum TelemetrySdkEventGroup {\n    Default = \"default\",\n    Error = \"error\",\n    RateLimiter = \"rate_limiter\"\n}\n","export enum TelemetrySdkEventName {\n    ClientInitialized = \"client_initialized\",\n    ClientDestroyed = \"client_destroyed\",\n    RateLimiterTriggered = \"rate_limiter_triggered\",\n    RateLimiterDisabledFeature = \"rate_limiter_disabled_feature\"\n}\n","export enum TelemetrySdkEventSource {\n    Client = \"Client\",\n    RateLimiter = \"RateLimiter\"\n}\n","\n\n\nexport enum SDKDependency {\n    TwilioClient = \"twilio_client\",\n    Twilsock = \"twilsock\"\n}\n\n\n\n\nexport interface TelemetrySDKSessionData {\n    \n\n\n    dependencies?: { [key in SDKDependency]?: string };\n}\n","export const loggerFactoryRTTI = Symbol.for(\"loggerFactory\");\nexport const newableLoggerRTTI = Symbol.for(\"NewableLogger\");\nexport const loglevelFactoryRTTI = Symbol.for(\"loglevelFactory\");\nexport const defaultPluginsRTTI = Symbol.for(\"loggerDefaultPlugins\");\nexport const loggerOptionsRTTI = Symbol.for(\"LoggerOptions\");\nexport const loggerInstancesRTTI = Symbol.for(\"LoggerInstances\");\n","export const authenticatorRTTI = Symbol.for(\"Authenticator\");\nexport const authenticatorDataContainerRTTI = Symbol.for(\"AuthenticatorDataContainer\");\nexport const authenticatorFactoryRTTI = Symbol.for(\"AuthenticatorFactory\");\nexport const twilioIdpUrlRTTI = Symbol.for(\"TwilioIdpUrl\");\nexport const twilioIdpUrlMockOptionsRTTI = Symbol.for(\"twilioIdpUrlMockOptions\");\nexport const authenticatorMockOptionsRTTI = Symbol.for(\"authenticatorMockOptions\");\n","import { Emitter } from \"~/modules/events/EventPublisher/Emitter\";\n\n\n\n\nexport interface EventPublisher<E extends string | symbol, F = (...args: unknown[]) => void> {\n    addListener(eventName: E, listener: F): this;\n    removeListener(eventName: E, listener: F): this;\n}\n\nexport function proxyEvent<T extends string | symbol, U extends string | symbol>(\n    from: EventPublisher<T>,\n    to: Emitter,\n    event: T,\n    alias: U\n) {\n    from.addListener(event, (...args: unknown[]) => {\n        to.emit(alias, ...args);\n    });\n}\n","import { ErrorCode, ErrorSeverity, FlexSdkError } from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\n\nfunction hasCycles(object: object): boolean {\n    try {\n        JSON.stringify(object);\n    } catch (err) {\n        const hasCycle = /^TypeError: Converting circular structure to JSON/.test(err);\n        return hasCycle;\n    }\n\n    return false;\n}\n\nexport function assertArray<T>(value: Array<T>, name: string): asserts value is Array<T> {\n    if (!Array.isArray(value)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected an array`);\n    }\n}\n\nexport function assertBoolean(value: boolean, name: string): asserts value is boolean {\n    if (typeof value !== \"boolean\") {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a boolean`);\n    }\n}\n\nexport function assertDefined<T>(value: T, name: string): asserts value is T {\n    if (typeof value === \"undefined\") {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a defined value`);\n    }\n}\n\nexport function assertNumber(value: number, name: string): asserts value is number {\n    if (typeof value !== \"number\" || Number.isNaN(value)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a number`);\n    }\n}\n\nexport function assertObject<T>(value: T, name: string): asserts value is T {\n    if (typeof value !== \"object\" || value === null || Array.isArray(value)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected an object`);\n    }\n}\n\nexport function assertNotCircularObject<T extends object>(value: T, name: string): asserts value is T {\n    assertObject(value, name);\n    if (hasCycles(value)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected an object without cycles`);\n    }\n}\n\nexport function assertString(value: string, name: string): asserts value is string {\n    if (typeof value !== \"string\") {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a string`);\n    }\n}\n\nexport function assertNotEmptyString(value: string, name: string): asserts value is string {\n    assertString(value, name);\n    if (value.trim() === \"\") {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a string which is not empty`);\n    }\n}\n\nexport function assertKeyInObject<T>(key: string, object: T): void {\n    if (!(key in object)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${key} is not a valid key`);\n    }\n}\n","module.exports = require(\"core-js/modules/web.dom-collections.for-each.js\");","module.exports = require(\"core-js/modules/es.array.concat.js\");","export const rateLimiterRTTI = Symbol.for(\"RateLimiter\");\nexport const rateLimiterMapRTTI = Symbol.for(\"Map<RateLimiter>\");\nexport const rateLimiterFactoryRTTI = Symbol.for(\"Factory<RateLimiter>\");\nexport const cleanupRateLimitersRTTI = Symbol.for(\"cleanupRateLimiters()\");\n","export const newableTwilsockClientRTTI = Symbol.for(\"NewableTwilsockClient\");\nexport const productIdRTTI = Symbol.for(\"ProductID\");\nexport const twilsockRTTI = Symbol.for(\"Twilsock\");\nexport const twilsockClientFactoryRTTI = Symbol.for(\"TwilsockClientFactory\");\n","\n\n\n\nexport enum InternalErrorCode {\n    \n\n\n    SyncConnectionError = 45510,\n    \n\n\n    SyncAccessForbiddenError = 54007,\n    \n\n\n    SyncMapNotFoundError = 54200,\n    \n\n\n    SyncMapItemNotFoundError = 54201,\n    \n\n\n    SyncInvalidMapItemDataError = 54206,\n    \n\n\n    SyncInvalidMapItemKeyError = 54209,\n    \n\n\n    SyncNameNotFoundError = 54300,\n    \n\n\n    SyncNameAlreadyExistsError = 54301,\n    \n\n\n    SyncInvalidNameError = 54302\n}\n\nexport type InternalErrorInfoMap = { [TKey in InternalErrorCode]: string };\n\nexport const internalErrorDetails: InternalErrorInfoMap = {\n    [InternalErrorCode.SyncConnectionError]: \"Sync connection error\",\n    [InternalErrorCode.SyncAccessForbiddenError]: \"Sync access forbidden for identity\",\n    [InternalErrorCode.SyncMapNotFoundError]: \"Sync map not found\",\n    [InternalErrorCode.SyncInvalidMapItemDataError]: \"Invalid sync map item data\",\n    [InternalErrorCode.SyncInvalidMapItemKeyError]: \"Invalid sync map item key\",\n    [InternalErrorCode.SyncMapItemNotFoundError]: \"Sync map item not found\",\n    [InternalErrorCode.SyncNameNotFoundError]: \"Sync unique name not found\",\n    [InternalErrorCode.SyncNameAlreadyExistsError]: \"Sync unique name already exists\",\n    [InternalErrorCode.SyncInvalidNameError]: \"Sync invalid unique name\"\n};\n","module.exports = require(\"core-js/modules/es.object.keys.js\");","import { interfaces } from \"inversify\";\nimport { telemetryClientRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { TelemetryClient } from \"~/modules/telemetry/TelemetryClient/TelemetryClient\";\n\nexport function createTelemetryClient<U extends object>(\n    container: interfaces.Container,\n    name: string\n): TelemetryClient<U> {\n    const telemetryClient = container.get<TelemetryClient<U>>(telemetryClientRTTI);\n    telemetryClient.name = name;\n    return telemetryClient;\n}\n","export { localStorageRTTI } from \"./storage.rtti\";\nexport { LocalStorageKeys } from \"./LocalStorage/LocalStorageKeys\";\nexport type { LocalStorage } from \"./LocalStorage/LocalStorage\";\nexport type { ClearCache } from \"./ClearCache/ClearCache\";\n","export type { Authenticator, IdpConfig, TokenData, TokenRefreshResult } from \"./Authenticator/Authenticator\";\nexport type { AuthenticatorFactory } from \"./AuthenticatorFactory/AuthenticatorFactory\";\nexport { authenticatorRTTI, authenticatorFactoryRTTI, twilioIdpUrlRTTI } from \"./auth.rtti\";\nexport type { TwilioIdpUrlFunction } from \"./TwilioIdpUrlFunction/TwilioIdpUrl\";\nexport { Role } from \"~/backend/generated/FederatedAuth/model/role\";\n","module.exports = require(\"core-js/modules/es.object.get-own-property-descriptor.js\");","module.exports = require(\"core-js/modules/es.symbol.iterator.js\");","export const reThrowErrorWithCustomMessageRTTI = Symbol.for(\"reThrowErrorWithCustomMessage\");\nexport const throwErrorRTTI = Symbol.for(\"throwError\");\nexport const throwAndReportErrorRTTI = Symbol.for(\"throwAndReportError\");\nexport const throwErrorFromErrorResponseRTTI = Symbol.for(\"throwErrorFromErrorResponse\");\nexport const throwErrorFromResponseRTTI = Symbol.for(\"throwErrorFromResponse\");\n","import { debuggerErrorCodes, ErrorCode, publicErrorDetails } from \"./ErrorCodes\";\nimport { InternalErrorCode, internalErrorDetails } from \"./InternalErrorCodes\";\n\nconst internalToPublicErrorMap: Map<InternalErrorCode, ErrorCode> = new Map([\n    [InternalErrorCode.SyncConnectionError, ErrorCode.ConnectionError],\n    [InternalErrorCode.SyncAccessForbiddenError, ErrorCode.Forbidden],\n    [InternalErrorCode.SyncMapNotFoundError, ErrorCode.NotFound],\n    [InternalErrorCode.SyncMapItemNotFoundError, ErrorCode.NotFound],\n    [InternalErrorCode.SyncInvalidMapItemDataError, ErrorCode.InvalidParams],\n    [InternalErrorCode.SyncInvalidMapItemKeyError, ErrorCode.InvalidParams],\n    [InternalErrorCode.SyncNameNotFoundError, ErrorCode.NotFound],\n    [InternalErrorCode.SyncNameAlreadyExistsError, ErrorCode.InvalidState],\n    [InternalErrorCode.SyncInvalidNameError, ErrorCode.InvalidParams]\n]);\n\nfunction isPublicErrorCode(errorCode: ErrorCode | InternalErrorCode): boolean {\n    const publicError = Object.values(ErrorCode).find((code: number) => code === errorCode);\n    return !!publicError;\n}\n\nexport function isInternalErrorCode(errorCode: ErrorCode | InternalErrorCode): boolean {\n    const internalError = Object.values(InternalErrorCode).find((code: number) => code === errorCode);\n    return !!internalError;\n}\n\nexport function isKnownErrorCode(errorCode: ErrorCode | InternalErrorCode): boolean {\n    return isPublicErrorCode(errorCode) || isInternalErrorCode(errorCode);\n}\n\nexport function isDebuggerErrorCode(errorCode: ErrorCode): boolean {\n    return debuggerErrorCodes.includes(errorCode);\n}\n\nfunction getPublicErrorCodeMessage(errorCode: ErrorCode | InternalErrorCode): string | undefined {\n    return publicErrorDetails[errorCode as ErrorCode];\n}\n\nfunction getInternalErrorCodeMessage(errorCode: ErrorCode | InternalErrorCode): string | undefined {\n    return internalErrorDetails[errorCode as InternalErrorCode];\n}\n\nexport function getMessage(errorCode: ErrorCode | InternalErrorCode): string {\n    return getPublicErrorCodeMessage(errorCode) || getInternalErrorCodeMessage(errorCode) || \"Error\";\n}\n\nexport function getPublicErrorCode(internalErrorCode: InternalErrorCode): ErrorCode {\n    const publicErrorCode = internalToPublicErrorMap.get(internalErrorCode);\n    return publicErrorCode || ErrorCode.Unknown;\n}\n\nexport function isDownstreamErrorCode(errorCode: ErrorCode | undefined): boolean {\n    return !errorCode || errorCode === ErrorCode.NetworkError || errorCode === ErrorCode.Unknown;\n}\n","import { TwilsockClient as TwilsockSdkClient } from \"twilsock\";\nimport { Result } from \"twilsock/lib/client\";\n\nexport { TwilsockSdkClient };\n\nexport type TwilsockOptions = {\n    region?: string;\n    clientMetadata: {\n        type: string;\n        sdk: string;\n        sdkv: string;\n        app?: string;\n        appv?: string;\n    };\n};\n\nexport enum TwilsockClientEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    StateChanged = \"stateChanged\",\n    ConnectionError = \"connectionError\",\n    Connected = \"connected\",\n    Disconnected = \"disconnected\"\n}\n\nexport interface NewableTwilsockClient {\n    new (token: string, productId: string, options?: TwilsockOptions): TwilsockClient;\n}\n\nexport interface TwilsockClient {\n    isConnected: boolean;\n\n    connect(): void;\n\n    disconnect(): Promise<void>;\n\n    updateToken(token: string): Promise<void>;\n\n    post(url: string, headers: unknown, body: unknown, grant?: string): Promise<Result>;\n\n    on(event: TwilsockClientEvent, listener: (...args: unknown[]) => void): TwilsockClient;\n\n    removeListener(eventName: TwilsockClientEvent, listener: (...args: unknown[]) => void): TwilsockClient;\n\n    emit(event: string, ...args: unknown[]): boolean;\n}\n","module.exports = require(\"core-js/modules/es.function.name.js\");","import { hasKey } from \"./typeGuards\";\n\nexport function convertDateStringValuesToDate<T extends object>(response: object): T {\n    const dateRegex = /^\\d{4}-\\d{1,2}-\\d{1,2}/;\n    const dateKeyRegex = new RegExp(\"date|expiration\", \"i\");\n    const processedResponse: Record<string, unknown | Date> = {};\n    Object.entries(response).forEach(([key, value]) => {\n        if (hasKey(response, key) && dateKeyRegex.test(key) && dateRegex.test(value)) {\n            processedResponse[key] = new Date(value);\n        } else {\n            processedResponse[key] = value;\n        }\n    });\n    return processedResponse as T;\n}\n","export function hasKey(value: object, key: string): value is { [key: string]: unknown } {\n    return Object.prototype.hasOwnProperty.call(value, key);\n}\n","import { SSOLoginRequestBody } from \"~/backend/generated/FederatedAuth/model/sSOLoginRequestBody\";\nimport { IdpConfig } from \"~/modules/auth\";\n\n\n\n\n\n\nfunction sanitizeSSOParams(s: string): string {\n    return s.replace(/((Token|Expiration|Identity|Roles)=[^&]+[&]?)/g, \"\").replace(/[&?]$/, \"\");\n}\n\nexport function getSSOLoginRequestBody(config: IdpConfig): SSOLoginRequestBody {\n    return {\n        products: [\"flex\"],\n        resource: sanitizeSSOParams(config.redirectUrl)\n    };\n}\n","import { injectable, inject } from \"inversify\";\nimport { IdpConfig, Authenticator } from \"~/modules/auth\";\nimport { InternalError } from \"~/modules/error\";\nimport { assertNotEmptyString } from \"~/utils/assert\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName } from \"~/modules/logger\";\nimport { authenticatorDataContainerRTTI } from \"~/modules/auth/auth.rtti\";\nimport { AuthenticatorDataContainer } from \"~/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainer\";\nimport * as FederatedAuthHelper from \"./FederatedAuthHelper\";\nimport { federatedAuthServiceRTTI } from \"~/backend/backend.rtti\";\nimport { FederatedAuthService } from \"~/backend/generated/FederatedAuth/api/federatedAuth.serviceInterface\";\nimport { TokenData, TokenRefreshResult } from \"~/modules/auth/Authenticator/Authenticator\";\n\n@injectable()\nexport class FederatedAuth implements Authenticator {\n    readonly #authenticatorDataContainer: AuthenticatorDataContainer;\n\n    readonly #logger: Logger;\n\n    readonly #federatedAuthService: FederatedAuthService;\n\n    constructor(\n        @inject(authenticatorDataContainerRTTI) authenticatorDataContainer: AuthenticatorDataContainer,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(federatedAuthServiceRTTI) federatedAuthService: FederatedAuthService\n    ) {\n        this.#authenticatorDataContainer = authenticatorDataContainer;\n        this.#logger = getLogger(LoggerName.Auth);\n        this.#federatedAuthService = federatedAuthService;\n    }\n\n    public async getIdpUrl(config: IdpConfig): Promise<string> {\n        assertNotEmptyString(config.redirectUrl, \"redirect url\");\n\n        const payload = FederatedAuthHelper.getSSOLoginRequestBody(config);\n        const accountSid = this.#authenticatorDataContainer.accountSid;\n\n        const data = await this.#federatedAuthService.getIdpUrl(accountSid, payload);\n        if (!data.location) {\n            this.#logger.error(\"No redirect location from /authenticate request, data: \", data);\n            throw new InternalError(\"Invalid response from /authenticate endpoint\");\n        }\n        return data.location;\n    }\n\n    async validateToken(token: string): Promise<TokenData> {\n        const accountSid = this.#authenticatorDataContainer.accountSid;\n        const tokenData = await this.#federatedAuthService.validateToken(accountSid, { token }, { token });\n\n        return {\n            roles: tokenData.roles,\n            valid: tokenData.valid,\n            dateExpired: tokenData.expiration,\n            identity: tokenData.identity\n        };\n    }\n\n    async refreshToken(token: string): Promise<TokenRefreshResult> {\n        const accountSid = this.#authenticatorDataContainer.accountSid;\n        const tokenRefreshResult = await this.#federatedAuthService.refreshToken(accountSid, {\n            token\n        });\n        return { token: tokenRefreshResult.token, dateExpired: tokenRefreshResult.expiration };\n    }\n}\n","import { injectable } from \"inversify\";\nimport { AuthenticatorDataContainer } from \"./AuthenticatorDataContainer\";\n\n@injectable()\nexport class AuthenticatorDataContainerImpl implements AuthenticatorDataContainer {\n    #accountSid: string;\n\n    get accountSid(): string {\n        return this.#accountSid;\n    }\n\n    set accountSid(accountSid: string) {\n        this.#accountSid = accountSid;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    authenticatorRTTI,\n    authenticatorFactoryRTTI,\n    twilioIdpUrlRTTI,\n    authenticatorDataContainerRTTI\n} from \"./auth.rtti\";\nimport { Authenticator } from \"./Authenticator/Authenticator\";\nimport { FederatedAuth } from \"./Authenticator/FederatedAuth/FederatedAuth\";\nimport { AuthenticatorFactory } from \"./AuthenticatorFactory/AuthenticatorFactory\";\nimport { createAuthenticator } from \"./AuthenticatorFactory/createAuthenticator/createAuthenticator\";\nimport { TwilioIdpUrlFunction } from \"./TwilioIdpUrlFunction/TwilioIdpUrl\";\nimport { getTwilioIdpUrl } from \"./TwilioIdpUrlFunction/getTwilioIdpUrl\";\nimport { AuthenticatorDataContainer } from \"./AuthenticatorDataContainer/AuthenticatorDataContainer\";\nimport { AuthenticatorDataContainerImpl } from \"./AuthenticatorDataContainer/AuthenticatorDataContainerImpl\";\n\nexport const authModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Authenticator>(authenticatorRTTI).to(FederatedAuth);\n    bind<AuthenticatorDataContainer>(authenticatorDataContainerRTTI)\n        .to(AuthenticatorDataContainerImpl)\n        .inSingletonScope();\n    bind<AuthenticatorFactory>(authenticatorFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (accountSid: string) => {\n            return createAuthenticator(context.container, accountSid);\n        };\n    });\n    bind<TwilioIdpUrlFunction>(twilioIdpUrlRTTI).toDynamicValue((context: interfaces.Context) => {\n        return (port?: string) => {\n            return getTwilioIdpUrl(context.container, port);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { Authenticator, authenticatorRTTI } from \"~/modules/auth\";\nimport { authenticatorDataContainerRTTI } from \"~/modules/auth/auth.rtti\";\nimport { AuthenticatorDataContainer } from \"~/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainer\";\n\nexport function createAuthenticator(container: interfaces.Container, accountSid: string): Authenticator {\n    const authenticatorDataContainer = container.get<AuthenticatorDataContainer>(authenticatorDataContainerRTTI);\n    authenticatorDataContainer.accountSid = accountSid;\n\n    const auth = container.get<Authenticator>(authenticatorRTTI);\n    return auth;\n}\n","import { interfaces } from \"inversify\";\nimport { environmentConfigRTTI, EnvironmentConfig } from \"~/modules/config\";\n\nexport function getTwilioIdpUrl(container: interfaces.Container, port?: string): string {\n    const envConfig = container.get<EnvironmentConfig>(environmentConfigRTTI);\n\n    const twilioServiceLoginUrl = envConfig.twilioServiceLoginUrl;\n    return port ? `${twilioServiceLoginUrl}?localPort=${port}` : twilioServiceLoginUrl;\n}\n","import { injectable, inject } from \"inversify\";\nimport { Role, AuthenticatorFactory, authenticatorFactoryRTTI } from \"~/modules/auth\";\nimport { AccountConfigProvider, accountConfigProviderRTTI, AccountConfig } from \"~/modules/config\";\nimport { sessionOptionsRTTI, Session, SessionOptions, SessionEvent } from \"~/modules/session\";\nimport { Twilsock, twilsockRTTI, TwilsockEvent } from \"~/modules/websocket\";\nimport { InternalError } from \"~/modules/error\";\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { Emitter, eventEmitterRTTI } from \"~/modules/events\";\nimport { getCurrentDate } from \"~/utils/getCurrentDate\";\n\nconst TOKEN_ABOUT_TO_EXPIRE_MINUTES = 1;\nconst VERIFICATION_INTERVAL_MS = 15000;\n\n@injectable()\nexport class SessionImpl implements Session {\n    #accountConfig: AccountConfig;\n\n    readonly #authFactory: AuthenticatorFactory;\n\n    #token: string;\n\n    #tokenExpiration: Date;\n\n    readonly #connection: Twilsock;\n\n    readonly #options: SessionOptions;\n\n    readonly #accountConfigProvider: AccountConfigProvider;\n\n    #roles: Array<Role> = [];\n\n    #identity: string;\n\n    #isActive: boolean = true;\n\n    readonly #logger: Logger;\n\n    #needsToAutoUpdateToken: boolean;\n\n    readonly #emitter: Emitter;\n\n    #verificationInterval: NodeJS.Timeout;\n\n    constructor(\n        @inject(twilsockRTTI) connection: Twilsock,\n        @inject(sessionOptionsRTTI) options: SessionOptions,\n        @inject(authenticatorFactoryRTTI) authFactory: AuthenticatorFactory,\n        @inject(accountConfigProviderRTTI) accountConfigProvider: AccountConfigProvider,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(eventEmitterRTTI) emitter: Emitter\n    ) {\n        this.#connection = connection;\n        this.#options = options;\n        this.#accountConfigProvider = accountConfigProvider;\n        this.#authFactory = authFactory;\n        this.#logger = getLogger(LoggerName.Session);\n        this.#logger.debug(\"Session constructed\");\n        this.#emitter = emitter;\n    }\n\n    async init(token: string): Promise<void> {\n        this.#logger.debug(\"will initialize session with token: \", token);\n        this.#logger.debug(\"will update token: \", this.#options.autoUpdateToken);\n\n        this.#token = token;\n        await this.#connection.connect(token);\n\n        \n        if (this.#options.autoUpdateToken) {\n            this.#connection.addListener(TwilsockEvent.TokenAboutToExpire, this.#handleTokenAboutToExpire);\n        }\n\n        \n        this.#accountConfig = await this.#accountConfigProvider(token);\n\n        const accountSid = this.#accountConfig.get().accountSid;\n\n        const auth = this.#authFactory(accountSid);\n        const tokenData = await auth.validateToken(this.#token);\n        this.#roles = tokenData.roles;\n        this.#tokenExpiration = tokenData.dateExpired;\n        this.#identity = tokenData.identity;\n\n        \n        if (this.#options.autoUpdateToken) {\n            this.#needsToAutoUpdateToken = this.#needsToAutoUpdateToken || this.#isTokenCloseToExpiry();\n            this.#verificationInterval = setInterval(() => this.#verifyToken(), VERIFICATION_INTERVAL_MS);\n        }\n\n        if (this.#needsToAutoUpdateToken) {\n            await this.#autoUpdateToken();\n        }\n\n        return Promise.resolve();\n    }\n\n    async updateToken(token: string): Promise<void> {\n        await this.#connection.updateToken(token);\n        this.#token = token;\n        this.#logger.debug(\"new token set\");\n    }\n\n    #verifyToken = async () => {\n        if (this.#isTokenCloseToExpiry()) {\n            await this.#autoUpdateToken();\n        }\n    };\n\n    #isTokenCloseToExpiry = () => {\n        \n        const now = getCurrentDate();\n        const tokenTtlMinutes = (this.#tokenExpiration.getTime() - now.getTime()) / (60 * 1000);\n\n        return tokenTtlMinutes <= TOKEN_ABOUT_TO_EXPIRE_MINUTES;\n    };\n\n    readonly #handleTokenAboutToExpire = async () => {\n        if (this.#accountConfig) {\n            await this.#autoUpdateToken();\n        } else {\n            this.#needsToAutoUpdateToken = true;\n        }\n    };\n\n    #autoUpdateToken = async () => {\n        this.#logger.debug(\"Auto-updating token\");\n\n        const accountSid = this.#accountConfig.get().accountSid;\n        if (!accountSid) {\n            throw new InternalError(\"Account sid not set\");\n        }\n\n        let newToken: string | undefined;\n        let newTokenDateExpired: Date | undefined;\n        const auth = this.#authFactory(accountSid);\n        try {\n            const tokenRefreshResult = await auth.refreshToken(this.token);\n            newTokenDateExpired = tokenRefreshResult.dateExpired;\n            if (newTokenDateExpired.getTime() === this.#tokenExpiration.getTime()) {\n                this.#logger.warn(\"Token expiration not extended, because max lifetime reached\");\n                this.#emitter.emit(SessionEvent.TokenMaxLifetimeReached, tokenRefreshResult.dateExpired);\n            }\n\n            newToken = tokenRefreshResult.token;\n        } catch (e) {\n            this.#logger.error(\"Failed to refresh token\", e);\n            this.#emitter.emit(SessionEvent.TokenAutoUpdateFailed);\n        }\n\n        if (!this.#isActive) {\n            this.#logger.trace(\"AutoUpdateToken, session destroyed after refreshToken\");\n            return;\n        }\n\n        if (newToken && newTokenDateExpired) {\n            try {\n                await this.updateToken(newToken);\n                this.#tokenExpiration = newTokenDateExpired;\n                this.#logger.info(\"Token auto-updated\");\n            } catch (e) {\n                this.#logger.error(\"Failed to auto-update token\", e);\n                this.#emitter.emit(SessionEvent.TokenAutoUpdateFailed);\n            }\n        }\n    };\n\n    async destroy(): Promise<void> {\n        if (this.#verificationInterval) {\n            clearInterval(this.#verificationInterval);\n        }\n        this.#isActive = false;\n        this.#connection.removeListener(TwilsockEvent.TokenAboutToExpire, this.#handleTokenAboutToExpire);\n        await this.#connection.destroy();\n    }\n\n    get token(): string {\n        return this.#token;\n    }\n\n    get roles(): Array<Role> {\n        return this.#roles;\n    }\n\n    addListener(eventName: SessionEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.on(eventName, listener);\n        return this;\n    }\n\n    removeListener(eventName: SessionEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.removeListener(eventName, listener);\n        return this;\n    }\n}\n","\nexport const getCurrentDate = (): Date => {\n    return new Date();\n};\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { sessionRTTI, sessionOptionsRTTI } from \"./session.rtti\";\nimport { Session, SessionOptions } from \"./Session/Session\";\nimport { SessionImpl } from \"./Session/SessionImpl\";\nimport { getDefaultSessionOptions } from \"./SessionOptions/defaultSessionOptions\";\n\nexport const sessionModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Session>(sessionRTTI).to(SessionImpl).inSingletonScope();\n    bind<SessionOptions>(sessionOptionsRTTI).toConstantValue(getDefaultSessionOptions());\n});\n","import { injectable, inject, postConstruct } from \"inversify\";\nimport { Client, ClientConfigType, ClientEvent } from \"~/modules/client\";\nimport { Role } from \"~/modules/auth\";\nimport { accountConfigRTTI, AccountConfig } from \"~/modules/config\";\nimport { Twilsock, twilsockRTTI, TwilsockEvent } from \"~/modules/websocket\";\nimport { Session, SessionEvent, sessionRTTI } from \"~/modules/session\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName } from \"~/modules/logger\";\nimport { TelemetryClient, TelemetryClientFactory, telemetryClientFactoryRTTI } from \"~/modules/telemetry\";\nimport {\n    telemetrySdkClientRTTI,\n    TelemetrySdkEvent,\n    TelemetrySdkEventGroup,\n    TelemetrySdkClient,\n    TelemetrySdkEventName,\n    TelemetrySdkEventSource\n} from \"~/modules/telemetrySdkClient\";\nimport { Emitter, eventEmitterRTTI, proxyEvent } from \"~/modules/events\";\nimport { cleanupRateLimitersRTTI } from \"~/modules/ratelimiter\";\n\n@injectable()\nexport class ClientImpl implements Client {\n    readonly #session: Session;\n\n    readonly #connection: Twilsock;\n\n    readonly #logger: Logger;\n\n    readonly #telemetryClientFactory: TelemetryClientFactory<any>; \n\n    public readonly config: ClientConfigType;\n\n    readonly #telemetrySdkClient: TelemetrySdkClient;\n\n    readonly #emitter: Emitter;\n\n    readonly #cleanupRateLimiters: Function;\n\n    constructor(\n        @inject(sessionRTTI) session: Session,\n        @inject(twilsockRTTI) connection: Twilsock,\n        @inject(accountConfigRTTI) account: AccountConfig,\n        @inject(telemetryClientFactoryRTTI) telemetryClientFactory: TelemetryClientFactory<any>, \n        @inject(telemetrySdkClientRTTI) telemetrySdkClient: TelemetrySdkClient,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(eventEmitterRTTI) emitter: Emitter,\n        @inject(cleanupRateLimitersRTTI) cleanupRateLimiters: Function\n    ) {\n        this.#session = session;\n        this.#connection = connection;\n        this.config = {\n            account\n        };\n        this.#telemetryClientFactory = telemetryClientFactory;\n        this.#telemetrySdkClient = telemetrySdkClient;\n        this.#logger = getLogger(LoggerName.Client);\n        this.#emitter = emitter;\n        this.#cleanupRateLimiters = cleanupRateLimiters;\n    }\n\n    @postConstruct()\n    setupProxies(): void {\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.TokenAboutToExpire, ClientEvent.TokenAboutToExpire);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.TokenExpired, ClientEvent.TokenExpired);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.TokenUpdated, ClientEvent.TokenUpdated);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.ConnectionError, ClientEvent.ConnectionLost);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.Connected, ClientEvent.ConnectionRestored);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.Disconnected, ClientEvent.Disconnected);\n        proxyEvent(this.#session, this.#emitter, SessionEvent.TokenAutoUpdateFailed, ClientEvent.TokenAutoUpdateFailed);\n        proxyEvent(\n            this.#session,\n            this.#emitter,\n            SessionEvent.TokenMaxLifetimeReached,\n            ClientEvent.TokenMaxLifetimeReached\n        );\n    }\n\n    async updateToken(token: string): Promise<void> {\n        await this.#session.updateToken(token);\n    }\n\n    #sendDestroyEvent = async (): Promise<void> => {\n        try {\n            const telemetrySdkClient = this.#telemetrySdkClient;\n            const group = telemetrySdkClient.createEventGroup<TelemetrySdkEvent>(TelemetrySdkEventGroup.Default);\n            await group.addEvents({\n                eventName: TelemetrySdkEventName.ClientDestroyed,\n                eventSource: TelemetrySdkEventSource.Client\n            });\n        } catch (e) {\n            this.#logger.error(\"Failed to send telemetry destroy event\", e);\n        }\n    };\n\n    async destroy(): Promise<void> {\n        await this.#sendDestroyEvent();\n        this.#logger.debug(\"client log out\");\n        await this.#session.destroy();\n        this.#emitter.removeAllListeners();\n        this.#cleanupRateLimiters();\n    }\n\n    get roles(): Array<Role> {\n        return [...this.#session.roles];\n    }\n\n    get token(): string {\n        return this.#session.token;\n    }\n\n    createTelemetryClient<U extends object>(name: string): TelemetryClient<U> {\n        return this.#telemetryClientFactory(name);\n    }\n\n    addListener(eventName: ClientEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.on(eventName, listener);\n        return this;\n    }\n\n    removeListener(eventName: ClientEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.removeListener(eventName, listener);\n        return this;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    Client,\n    ClientOptions,\n    ClientProvider,\n    clientRTTI,\n    clientProviderRTTI,\n    clientOptionsRTTI\n} from \"~/modules/client\";\nimport { ClientImpl } from \"./Client/ClientImpl/ClientImpl\";\nimport { createClient } from \"./ClientProvider/createClient\";\nimport { ClientOptionsStore } from \"./ClientOptions/ClientOptionsStore\";\nimport { DeepPartial } from \"~/utils/DeepPartial\";\n\nexport const clientModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<ClientOptions>(clientOptionsRTTI).to(ClientOptionsStore).inSingletonScope();\n\n    bind<Client>(clientRTTI).to(ClientImpl).inSingletonScope();\n    bind<ClientProvider>(clientProviderRTTI).toProvider<Client>((context: interfaces.Context) => {\n        return (token: string, userOptions?: DeepPartial<ClientOptions>) => {\n            return createClient(context.container, token, userOptions);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { isDebuggerErrorCode } from \"~/modules/error/ErrorCode/ErrorCodeHelper\";\nimport { FlexSdkError } from \"~/modules/error/FlexSdkError/FlexSdkError\";\nimport { ErrorResponse } from \"~/modules/error/ThrowError/ErrorHelper\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { TelemetryErrorEvent, TelemetryEventGroup } from \"~/modules/telemetry\";\nimport { telemetrySdkErrorEventGroupRTTI } from \"~/modules/telemetrySdkClient\";\n\nexport async function reportError(container: interfaces.Container, error: FlexSdkError) {\n    try {\n        const errorEventGroup = container.get<TelemetryEventGroup<TelemetryErrorEvent>>(\n            telemetrySdkErrorEventGroupRTTI\n        );\n\n        const wrappedError = error.wrappedError as ErrorResponse;\n        const debuggerFlag = isDebuggerErrorCode(error.code);\n\n        await errorEventGroup.addErrorEvent({\n            eventName: \"error_reported\",\n            error: {\n                code: error.code,\n                debugger: debuggerFlag,\n                message: error.message,\n                module: error.metadata.module,\n                reporter: \"flex-sdk\",\n                resourceSid: error.metadata.resourceSid,\n                severity: error.metadata.severity,\n                source: error.metadata.source || \"flex-sdk\",\n                stackTrace: error.stack,\n                unhandled: error.metadata.unhandled,\n                wrappedErrorCode: wrappedError?.code,\n                wrappedErrorMessage: wrappedError?.message ?? undefined\n            }\n        });\n    } catch (e) {\n        const loggerFactory = container.get<LoggerFactory>(loggerFactoryRTTI);\n        const logger = loggerFactory(LoggerName.Error);\n        logger.debug(\"Failed to report the error\", e);\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { ErrorCode } from \"~/modules/error/ErrorCode/ErrorCodes\";\nimport { getPublicErrorCode, isInternalErrorCode, isKnownErrorCode } from \"~/modules/error/ErrorCode/ErrorCodeHelper\";\nimport { FlexSdkError } from \"~/modules/error/FlexSdkError/FlexSdkError\";\n\nimport { InternalErrorCode } from \"~/modules/error/ErrorCode//InternalErrorCodes\";\nimport { reportError } from \"./reportError\";\nimport { FlexSdkErrorMetadata } from \"~/modules/error/FlexSdkErrorMetadata/FlexSdkErrorMetadata\";\n\nexport interface ErrorResponse {\n    code?: number;\n    message?: string;\n}\n\nfunction createFlexSdkError(\n    errorCode: number,\n    metadata?: FlexSdkErrorMetadata,\n    message?: string,\n    error?: Error\n): FlexSdkError {\n    \n    if (error instanceof FlexSdkError) {\n        return error;\n    }\n\n    if (!errorCode || !isKnownErrorCode(errorCode)) {\n        console.warn(\"Unknown error code\"); \n    }\n\n    let publicErrorCode = errorCode;\n    if (isInternalErrorCode(errorCode)) {\n        publicErrorCode = getPublicErrorCode(errorCode as InternalErrorCode);\n    }\n\n    return new FlexSdkError(publicErrorCode, metadata, message, error);\n}\n\n\n\nexport function throwFlexSdkError(\n    errorCode: number,\n    metadata?: FlexSdkErrorMetadata,\n    message?: string,\n    error?: Error\n): never {\n    throw createFlexSdkError(errorCode, metadata, message, error);\n}\n\nexport function throwAndReportFlexSdkError(\n    container: interfaces.Container,\n    errorCode: number,\n    metadata?: FlexSdkErrorMetadata,\n    message?: string,\n    error?: Error\n): never {\n    const errorToThrow = createFlexSdkError(errorCode, metadata, message, error);\n\n    reportError(container, errorToThrow);\n    throwFlexSdkError(errorCode, metadata, message, errorToThrow);\n}\n\nexport function reThrowFlexSdkErrorWithCustomMessage(error: FlexSdkError, customMessage: string): never {\n    throw new FlexSdkError(error.code, error.metadata, customMessage, error.wrappedError);\n}\n\nexport function throwFlexSdkErrorFromErrorResponse(\n    errorResponse: ErrorResponse,\n    metadata?: FlexSdkErrorMetadata\n): never {\n    if (errorResponse instanceof FlexSdkError) {\n        throw errorResponse;\n    }\n    const errorCode = errorResponse.code ? errorResponse.code : ErrorCode.Unknown;\n    throwFlexSdkError(errorCode, metadata, errorResponse.message);\n}\n\nexport async function throwFlexSdkErrorFromResponse(\n    response: Response,\n    metadata?: FlexSdkErrorMetadata,\n    message?: string\n): Promise<never> {\n    const errorResponse: ErrorResponse = await response.json();\n    errorResponse.message = message || errorResponse.message;\n    throwFlexSdkErrorFromErrorResponse(errorResponse, metadata);\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    throwAndReportErrorRTTI,\n    throwErrorFromErrorResponseRTTI,\n    throwErrorFromResponseRTTI,\n    reThrowErrorWithCustomMessageRTTI\n} from \"~/modules/error/error.rtti\";\nimport {\n    ThrowAndReportErrorFunction,\n    ThrowErrorFromErrorResponseFunction,\n    ThrowErrorFromResponseFunction,\n    ReThrowErrorWithCustomMessageFunction,\n    ThrowErrorFunction\n} from \"~/modules/error/ThrowError/ThrowErrorFunctions\";\nimport {\n    throwAndReportFlexSdkError,\n    throwFlexSdkErrorFromErrorResponse,\n    throwFlexSdkErrorFromResponse,\n    reThrowFlexSdkErrorWithCustomMessage,\n    ErrorResponse,\n    throwFlexSdkError\n} from \"~/modules/error/ThrowError/ErrorHelper\";\nimport { FlexSdkErrorMetadata } from \"~/modules/error/FlexSdkErrorMetadata/FlexSdkErrorMetadata\";\nimport { throwErrorRTTI } from \"~/modules/error\";\n\nexport const errorModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<ThrowErrorFunction>(throwErrorRTTI)\n        .toDynamicValue(() => {\n            return (errorCode: number, metadata?: FlexSdkErrorMetadata, message?: string, error?: Error) => {\n                return throwFlexSdkError(errorCode, metadata, message, error);\n            };\n        })\n        .inSingletonScope();\n    bind<ThrowAndReportErrorFunction>(throwAndReportErrorRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            return (errorCode: number, metadata?: FlexSdkErrorMetadata, message?: string, error?: Error) => {\n                return throwAndReportFlexSdkError(context.container, errorCode, metadata, message, error);\n            };\n        })\n        .inSingletonScope();\n    bind<ThrowErrorFromErrorResponseFunction>(throwErrorFromErrorResponseRTTI)\n        .toDynamicValue(() => {\n            return (errorResponse: ErrorResponse, metadata?: FlexSdkErrorMetadata) => {\n                return throwFlexSdkErrorFromErrorResponse(errorResponse, metadata);\n            };\n        })\n        .inSingletonScope();\n    bind<ThrowErrorFromResponseFunction>(throwErrorFromResponseRTTI)\n        .toDynamicValue(() => {\n            return (response: Response, metadata?: FlexSdkErrorMetadata, message?: string) => {\n                return throwFlexSdkErrorFromResponse(response, metadata, message);\n            };\n        })\n        .inSingletonScope();\n    bind<ReThrowErrorWithCustomMessageFunction>(reThrowErrorWithCustomMessageRTTI).toConstantValue(\n        reThrowFlexSdkErrorWithCustomMessage\n    );\n});\n","import { EventEmitter } from \"events\";\nimport { ContainerModule, interfaces } from \"inversify\";\nimport { eventEmitterRTTI } from \"./events.rtti\";\nimport { Emitter } from \"./EventPublisher/Emitter\";\n\nexport const eventsModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Emitter>(eventEmitterRTTI).toDynamicValue(() => new EventEmitter());\n});\n","import { EnvironmentConfig } from \"~/modules/config\";\n\nexport const getEnvironmentConfig = (): EnvironmentConfig => ({\n    twilioServiceLoginUrl: \"https://flex.twilio.com/admin\",\n    ...window.__TWILIO_FLEX_SDK__?.environmentConfig\n});\n","import { inject, injectable } from \"inversify\";\nimport { AccountConfig, AccountConfigData } from \"~/modules/config\";\nimport { accountConfigUpdaterRTTI, configDataContainerRTTI } from \"~/modules/config/config.rtti\";\nimport { assertKeyInObject } from \"~/utils/assert\";\nimport { AccountConfigUpdater } from \"~/modules/config/AccountConfig/AccountConfigUpdater\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\n\n@injectable()\nexport class AccountConfigStore implements AccountConfig {\n    readonly #dataContainer: ConfigDataContainer<AccountConfigData>;\n\n    readonly #accountConfigUpdater: AccountConfigUpdater;\n\n    #currentUpdateConfigPromise: Promise<AccountConfigData> | undefined;\n\n    constructor(\n        @inject(configDataContainerRTTI) dataContainer: ConfigDataContainer<AccountConfigData>,\n        @inject(accountConfigUpdaterRTTI) updater: AccountConfigUpdater\n    ) {\n        this.#dataContainer = dataContainer;\n        this.#accountConfigUpdater = updater;\n    }\n\n    get(): AccountConfigData {\n        return this.#dataContainer.get();\n    }\n\n    async set(config: Partial<AccountConfigData>): Promise<void> {\n        const data = this.#dataContainer.get();\n\n        \n        const { accountSid, ...dataWithoutAccountSid } = data; \n        Object.keys(config).map((key: string) => assertKeyInObject(key, dataWithoutAccountSid));\n\n        \n        const updateConfigCall = () => this.#accountConfigUpdater(accountSid, config);\n        const updatedConfigData = await this.updateInCallOrder(updateConfigCall);\n        this.#dataContainer.set(updatedConfigData);\n\n        return Promise.resolve();\n    }\n\n    updateInCallOrder(updateConfigCall: () => Promise<AccountConfigData>): Promise<AccountConfigData> {\n        if (this.#currentUpdateConfigPromise) {\n            \n            \n            this.#currentUpdateConfigPromise = this.#currentUpdateConfigPromise.then(() => {\n                return updateConfigCall();\n            });\n        } else {\n            this.#currentUpdateConfigPromise = updateConfigCall();\n        }\n\n        return this.#currentUpdateConfigPromise;\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { AccountConfigData } from \"~/modules/config\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\n\nexport const updateAccountConfig = async (\n    container: interfaces.Container,\n    accountSid: string,\n    config: Partial<AccountConfigData>\n): Promise<AccountConfigData> => {\n    const configurationService = container.get<ConfigurationService>(configurationServiceRTTI);\n    const updatedConfiguration = await configurationService.updateConfiguration({ accountSid, ...config });\n    return updatedConfiguration;\n};\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    AccountConfig,\n    AccountConfigProvider,\n    AccountConfigData,\n    EnvironmentConfig,\n    PublicConfigProvider,\n    AccountSidOption,\n    RuntimeDomainOption,\n    PublicConfig,\n    AccountConfigDataGetter,\n    AccountConfigOptions,\n    accountConfigRTTI,\n    accountConfigProviderRTTI,\n    environmentConfigRTTI,\n    publicConfigProviderRTTI,\n    configDataContainerRTTI,\n    featuresProviderRTTI,\n    getAccountConfigRTTI,\n    accountConfigOptionsRTTI,\n    FeaturesProvider,\n    FeaturesConfigDataGetter,\n    FeaturesConfig\n} from \"~/modules/config\";\nimport { accountConfigProvider } from \"./AccountConfigProvider/AccountConfigProvider\";\nimport { accountConfigUpdaterRTTI, getFeaturesConfigRTTI } from \"./config.rtti\";\nimport { getEnvironmentConfig } from \"./EnvironmentConfig/EnvironmentConfigImpl\";\nimport { AccountConfigStore } from \"./AccountConfig/AccountConfigImpl/AccountConfigStore/AccountConfigStore\";\nimport { getPublicConfig } from \"./PublicConfigProvider/getPublicConfig\";\nimport { XOR } from \"~/utils/utilityTypes\";\nimport { updateAccountConfig } from \"./AccountConfig/AccountConfigImpl/AccountConfigUpdate/updateAccountConfig\";\nimport { ConfigDataContainer } from \"./AccountConfig/ConfigDataContainer\";\nimport { AccountConfigDataContainer } from \"./AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer\";\nimport { AccountConfigUpdater } from \"./AccountConfig/AccountConfigUpdater\";\nimport { getAccountConfigData } from \"./AccountConfigDataGetter/getAccountConfigData\";\nimport { getDefaultAccountConfigOptions } from \"./AccountConfigOptions/getDefaultAccountConfigOptions\";\nimport { getFeaturesConfig } from \"~/modules/config/FeaturesConfigDataGetter/getFeaturesConfig\";\nimport { featuresProviderImpl } from \"~/modules/config/FeaturesProvider/featuresProviderImpl/featuresProviderImpl\";\n\nexport const configModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<AccountConfig>(accountConfigRTTI).to(AccountConfigStore).inSingletonScope();\n    bind<ConfigDataContainer<AccountConfigData>>(configDataContainerRTTI)\n        .to(AccountConfigDataContainer)\n        .inSingletonScope();\n    bind<AccountConfigProvider>(accountConfigProviderRTTI).toProvider<AccountConfig>((context: interfaces.Context) =>\n        accountConfigProvider(context.container)\n    );\n    bind<AccountConfigUpdater>(accountConfigUpdaterRTTI).toDynamicValue((context: interfaces.Context) => {\n        return (accountSid: string, config: Partial<AccountConfigData>) =>\n            updateAccountConfig(context.container, accountSid, config);\n    });\n    bind<EnvironmentConfig>(environmentConfigRTTI).toDynamicValue(getEnvironmentConfig);\n    bind<PublicConfigProvider>(publicConfigProviderRTTI).toProvider<PublicConfig>((context: interfaces.Context) => {\n        return (option: XOR<AccountSidOption, RuntimeDomainOption>) => getPublicConfig(context.container, option);\n    });\n    bind<FeaturesProvider>(featuresProviderRTTI).toProvider<FeaturesConfig>(featuresProviderImpl);\n    bind<FeaturesConfigDataGetter>(getFeaturesConfigRTTI).toDynamicValue((context: interfaces.Context) =>\n        getFeaturesConfig(context.container)\n    );\n    bind<AccountConfigDataGetter>(getAccountConfigRTTI).toDynamicValue((context: interfaces.Context) =>\n        getAccountConfigData(context.container)\n    );\n    bind<AccountConfigOptions>(accountConfigOptionsRTTI).toConstantValue(getDefaultAccountConfigOptions());\n});\n","import { AccountConfigOptions } from \"./AccountConfigOptions\";\n\nexport function getDefaultAccountConfigOptions(): AccountConfigOptions {\n    return {\n        query: {\n            UiVersion: undefined\n        }\n    };\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { newableTwilsockClientRTTI, twilsockRTTI, productIdRTTI, twilsockClientFactoryRTTI } from \"./websocket.rtti\";\nimport {\n    NewableTwilsockClient,\n    TwilsockOptions,\n    TwilsockSdkClient,\n    TwilsockClient\n} from \"./TwilsockClient/TwilsockClient\";\nimport { Twilsock } from \"./Twilsock/Twilsock\";\nimport { TwilsockImpl } from \"./Twilsock/TwilsockImpl\";\nimport { TwilsockClientFactory } from \"~/modules/websocket/TwilsockClientFactory/TwilsockClientFactory\";\nimport { getTwilsockClient } from \"~/modules/websocket/TwilsockClientFactory/getTwilsockClient\";\n\nexport const websocketModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<NewableTwilsockClient>(newableTwilsockClientRTTI).toConstructor(TwilsockSdkClient);\n    bind<string>(productIdRTTI).toConstantValue(\"flex\");\n    bind<Twilsock>(twilsockRTTI).to(TwilsockImpl).inSingletonScope();\n    bind<TwilsockClientFactory>(twilsockClientFactoryRTTI).toFactory<TwilsockClient>((context: interfaces.Context) => {\n        return (token: string, productId: string, options?: TwilsockOptions): TwilsockClient => {\n            return getTwilsockClient(context.container, token, productId, options);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport {\n    NewableTwilsockClient,\n    TwilsockOptions,\n    TwilsockClient\n} from \"~/modules/websocket/TwilsockClient/TwilsockClient\";\nimport { newableTwilsockClientRTTI } from \"~/modules/websocket/websocket.rtti\";\n\nexport function getTwilsockClient(\n    container: interfaces.Container,\n    token: string,\n    productId: string,\n    options?: TwilsockOptions\n): TwilsockClient {\n    const TwilsockClientConstructor = container.get<NewableTwilsockClient>(newableTwilsockClientRTTI);\n    return new TwilsockClientConstructor(token, productId, options);\n}\n","export const rbacRTTI = Symbol.for(\"Rbac\");\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { requiredRole } from \"./RequiredRole/requiredRole\";\nimport { rbacRTTI } from \"./rbac.rtti\";\nimport { Rbac } from \"./Rbac\";\nimport { hasRole } from \"./HasRole/hasRole\";\n\nexport const rbacModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Rbac>(rbacRTTI).toDynamicValue((context: interfaces.Context) => {\n        return {\n            requiredRole: requiredRole(context.container),\n            hasRole: hasRole(context.container)\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { Role } from \"~/modules/auth\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\n\nexport const hasRole =\n    (container: interfaces.Container) =>\n    (role: Role): boolean => {\n        const session = container.get<Session>(sessionRTTI);\n        const userRoles = session.roles;\n        return userRoles.includes(role);\n    };\n","import { injectable } from \"inversify\";\nimport { Logger, LoggerLevel, LoggerLevelNumbers, Loglevel, LogEntry } from \"~/modules/logger\";\n\n@injectable()\nexport class LoggerImpl implements Logger {\n    readonly #loglevel: Loglevel;\n\n    constructor(loglevel: Loglevel) {\n        this.#loglevel = loglevel;\n    }\n\n    trace = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.trace(...args);\n    };\n\n    debug = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.debug(...args);\n    };\n\n    \n\n\n    log = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.debug(...args);\n    };\n\n    info = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.info(...args);\n    };\n\n    warn = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.warn(...args);\n    };\n\n    error = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.error(...args);\n    };\n\n    setLevel = (level: LoggerLevel): void => {\n        this.#loglevel.setLevel(level);\n    };\n\n    getLevel = (): LoggerLevelNumbers => {\n        return this.#loglevel.getLevel();\n    };\n}\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nconst toTwoDigits = (number: Number) => {\n    if (number < 10) {\n        return `0${number}`;\n    }\n    return `${number}`;\n};\n\nconst formatDate = (date: Date): string => {\n    const year = date.getFullYear();\n    const month = toTwoDigits(date.getMonth() + 1);\n    const day = toTwoDigits(date.getDate());\n    const hours = toTwoDigits(date.getHours());\n    const minutes = toTwoDigits(date.getMinutes());\n    const seconds = toTwoDigits(date.getSeconds());\n    const miliseconds = toTwoDigits(date.getMilliseconds());\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${miliseconds}`;\n};\n\nexport const formatEntry =\n    (originalFactory: MethodFactory) => (methodName: string, logLevel: LogLevelNumbers, loggerName: string) => {\n        return (logEntry: LogEntry, ...messages: unknown[]): void => {\n            const timestamp = formatDate(logEntry.timestamp);\n            const level = logEntry.severity.toUpperCase();\n            const messagePrefix = `[${timestamp}] Flex SDK → ${loggerName} (${level}): `;\n            const method = originalFactory(methodName, logLevel, loggerName);\n            return method(messagePrefix, ...messages);\n        };\n    };\n","import { Loglevel } from \"~/modules/logger\";\nimport { createLogEntry } from \"./logentry/createLogEntry\";\nimport { setContext } from \"./logentry/setContext\";\nimport { setData } from \"./logentry/setData\";\nimport { formatEntry } from \"./logentry/formatEntry\";\n\nconst factories = [createLogEntry, setContext, setData, formatEntry].reverse();\n\nexport const logEntryPlugin = (loglevel: Loglevel): Loglevel => {\n    factories.forEach((f) => {\n        const originalFactory = loglevel.methodFactory;\n        \n        loglevel.methodFactory = f(originalFactory);\n    });\n\n    loglevel.setLevel(loglevel.getLevel());\n    return loglevel;\n};\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry, Severity } from \"~/modules/logger\";\n\nexport const createLogEntry =\n    (originalFactory: MethodFactory) => (methodName: string, logLevel: LogLevelNumbers, loggerName: string) => {\n        return (firstParam: LogEntry | unknown, ...messages: unknown[]): void => {\n            const isLogEntry = firstParam instanceof LogEntry;\n            if (!isLogEntry) {\n                messages.unshift(firstParam);\n            }\n\n            const logEntry = isLogEntry ? (firstParam as LogEntry) : new LogEntry(loggerName, methodName as Severity);\n            const method = originalFactory(methodName, logLevel, loggerName);\n            return method(logEntry, ...messages);\n        };\n    };\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nexport const setContext =\n    (originalFactory: MethodFactory) => (methodName: string, logLevel: LogLevelNumbers, loggerName: string) => {\n        return (logEntry: LogEntry, ...messages: unknown[]): void => {\n            \n            \n\n            const method = originalFactory(methodName, logLevel, loggerName);\n            return method(logEntry, ...messages);\n        };\n    };\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nexport const setData =\n    (originalFactory: MethodFactory) => (methodName: string, logLevel: LogLevelNumbers, loggerName: string) => {\n        return (logEntry: LogEntry, ...messages: unknown[]): void => {\n            if (!logEntry.data) {\n                \n                logEntry.data = messages;\n            }\n\n            const method = originalFactory(methodName, logLevel, loggerName);\n            return method(logEntry, ...messages);\n        };\n    };\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { getLogger as getLoglevel } from \"loglevel\";\nimport { Logger, NewableLogger, LoggerOptions } from \"./Logger/Logger\";\nimport {\n    loggerFactoryRTTI,\n    newableLoggerRTTI,\n    loglevelFactoryRTTI,\n    defaultPluginsRTTI,\n    loggerOptionsRTTI,\n    loggerInstancesRTTI\n} from \"./logger.rtti\";\nimport { LoglevelFactory, LoggerPlugin, LoggerInstances } from \"./LoggerFactory/LoggerFactory\";\nimport { getLogger } from \"./LoggerFactory/getLogger\";\nimport { getDefaultLoggerOptions } from \"./DefaultLoggerLevel/defaultLoggerLevel\";\nimport { LoggerImpl } from \"./Logger/LoggerImpl/LoggerImpl\";\nimport { logEntryPlugin } from \"./plugins/logEntryPlugin\";\n\nexport const loggerModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<LoglevelFactory>(loglevelFactoryRTTI).toConstantValue(getLoglevel);\n    bind<interfaces.Factory<Logger>>(loggerFactoryRTTI).toFactory<Logger>((context: interfaces.Context) =>\n        getLogger(context.container)\n    );\n    bind<NewableLogger>(newableLoggerRTTI).toConstructor(LoggerImpl);\n    bind<LoggerPlugin[]>(defaultPluginsRTTI).toConstantValue([logEntryPlugin]);\n    bind<LoggerOptions>(loggerOptionsRTTI).toConstantValue(getDefaultLoggerOptions());\n    bind<LoggerInstances>(loggerInstancesRTTI).toConstantValue(new Map());\n});\n","import { injectable, inject } from \"inversify\";\nimport { telemetryEventGroupFactoryRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, TelemetryLoggerName } from \"~/modules/logger\";\nimport { TelemetryEventGroup, TelemetryClient } from \"~/modules/telemetry\";\nimport { TelemetryEventGroupFactory } from \"~/modules/telemetry/TelemetryEventGroupFactory/TelemetryEventGroupFactory\";\n\n@injectable()\nexport class TelemetryClientImpl<U extends object> implements TelemetryClient<U> {\n    name: string;\n\n    sessionData?: U;\n\n    readonly #eventGroupFactory: TelemetryEventGroupFactory<unknown>;\n\n    readonly #logger: Logger;\n\n    constructor(\n        @inject(telemetryEventGroupFactoryRTTI) eventGroupFactory: TelemetryEventGroupFactory<unknown>,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory<TelemetryLoggerName>\n    ) {\n        this.#eventGroupFactory = eventGroupFactory;\n        this.#logger = getLogger(TelemetryLoggerName.TelemetryClient);\n    }\n\n    createEventGroup<T>(name?: string): TelemetryEventGroup<T> {\n        this.#logger.debug(\"creating event group with name: \", name);\n        const eventGroup = this.#eventGroupFactory(this, name);\n        return eventGroup;\n    }\n\n    \n    \n    async setSessionData(sessionData: U): Promise<void> {\n        this.sessionData = sessionData;\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport { TelemetryClient, TelemetryEvent, TelemetryEventGroup } from \"~/modules/telemetry\";\nimport { TelemetryProcessor } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessor\";\nimport { telemetryProcessorRTTI, telemetryOptionsRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { TelemetryProcessingResult } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessingResult\";\nimport { TelemetryErrorEvent } from \"~/modules/telemetry/TelemetryEventGroup/TelemetryErrorEvent\";\nimport { TelemetryOptions } from \"../../TelemetryOptions/TelemetryOptions\";\nimport { Twilsock, twilsockRTTI } from \"~/modules/websocket\";\n\n@injectable()\nexport class TelemetryEventGroupImpl<T> implements TelemetryEventGroup<T> {\n    name?: string;\n\n    telemetryClient: TelemetryClient;\n\n    readonly #processor: TelemetryProcessor;\n\n    readonly #options: TelemetryOptions;\n\n    readonly #connection: Twilsock;\n\n    constructor(\n        @inject(telemetryProcessorRTTI) processor: TelemetryProcessor,\n        @inject(telemetryOptionsRTTI) telemetryOptions: TelemetryOptions,\n        @inject(twilsockRTTI) twilsock: Twilsock\n    ) {\n        this.#processor = processor;\n        this.#options = telemetryOptions;\n        this.#connection = twilsock;\n    }\n\n    async addEvents(...events: (T & TelemetryEvent)[]): Promise<TelemetryProcessingResult> {\n        return this.#processor.processEvents(\n            this.telemetryClient.name,\n            this.name,\n            this.telemetryClient.sessionData,\n            ...events\n        );\n    }\n\n    async addErrorEvent(errorEvent: TelemetryErrorEvent): Promise<TelemetryProcessingResult> {\n        const isWebsocketAvailable = this.#connection.isConnected();\n        const suppressErrors = !(this.#options.reportErrors && isWebsocketAvailable);\n\n        if (suppressErrors) {\n            return {\n                eventsSucceeded: 0,\n                eventsFailed: 0,\n                eventsNotProcessed: 1\n            };\n        }\n\n        return this.#processor.processEvents(\n            \"flex-ui-sdk-error-v1\",\n            this.name,\n            this.telemetryClient.sessionData,\n            errorEvent\n        );\n    }\n}\n","import { RateLimiterOptions } from \"~/modules/ratelimiter\";\n\nexport type TelemetryRateLimiterOptions = Omit<RateLimiterOptions, \"name\">;\n\nexport const telemetryRateLimiterOptions: TelemetryRateLimiterOptions = {\n    timeWindow: 60000,\n    maxHitsInTimeWindow: 100,\n    disableFeatureThreshold: 5\n};\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    telemetryClientFactoryRTTI,\n    telemetryEventGroupFactoryRTTI,\n    telemetryClientRTTI,\n    telemetryEventGroupRTTI,\n    telemetryProcessorRTTI,\n    telemetryOptionsRTTI,\n    telemetryRateLimiterOptionsRTTI\n} from \"./telemetry.rtti\";\nimport {\n    createTelemetryClient,\n    TelemetryClient,\n    TelemetryClientFactory,\n    TelemetryEventGroup\n} from \"~/modules/telemetry\";\nimport { TelemetryProcessor } from \"./TelemetryProcessor/TelemetryProcessor\";\nimport { createEventGroup } from \"./TelemetryEventGroupFactory/createEventGroup\";\nimport { TelemetryClientImpl } from \"./TelemetryClient/TelemetryClientImpl/TelemetryClientImpl\";\nimport { TelemetryEventGroupImpl } from \"./TelemetryEventGroup/TelemetryEventGroupImpl/TelemetryEventGroupImpl\";\nimport { TelemetryEventGroupFactory } from \"./TelemetryEventGroupFactory/TelemetryEventGroupFactory\";\nimport { TwilioTelemetryProcessor } from \"./TelemetryProcessor/TwilioEventProcessor/TwilioTelemetryProcessor\";\nimport { TelemetryOptions } from \"./TelemetryOptions/TelemetryOptions\";\nimport { getDefaultTelemetryOptions } from \"./TelemetryOptions/getDefaultTelemetryOptions\";\nimport {\n    TelemetryRateLimiterOptions,\n    telemetryRateLimiterOptions\n} from \"~/modules/telemetry/TelemetryProcessor/TelemetryRateLimiterOptions\";\n\nexport const telemetryModuleContainer = new ContainerModule(<U extends object>(bind: interfaces.Bind) => {\n    bind<TelemetryClientFactory<U>>(telemetryClientFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (name: string) => {\n            return createTelemetryClient(context.container, name);\n        };\n    });\n\n    bind<TelemetryClient<U>>(telemetryClientRTTI).to(TelemetryClientImpl);\n\n    bind<TelemetryEventGroupFactory<U>>(telemetryEventGroupFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (telemetryClient: TelemetryClient<object>, name?: string) => {\n            return createEventGroup(context.container, telemetryClient, name);\n        };\n    });\n\n    bind<TelemetryEventGroup<U>>(telemetryEventGroupRTTI).to(TelemetryEventGroupImpl);\n\n    bind<TelemetryProcessor>(telemetryProcessorRTTI).to(TwilioTelemetryProcessor).inSingletonScope();\n\n    bind<TelemetryOptions>(telemetryOptionsRTTI).toConstantValue(getDefaultTelemetryOptions());\n\n    bind<TelemetryRateLimiterOptions>(telemetryRateLimiterOptionsRTTI).toConstantValue(telemetryRateLimiterOptions);\n});\n","import { interfaces } from \"inversify\";\nimport { telemetryEventGroupRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { TelemetryClient, TelemetryEventGroup } from \"~/modules/telemetry\";\n\nexport function createEventGroup<T>(\n    container: interfaces.Container,\n    telemetryClient: TelemetryClient<object>,\n    name?: string\n): TelemetryEventGroup<T> {\n    const eventGroup = container.get<TelemetryEventGroup<T>>(telemetryEventGroupRTTI);\n    eventGroup.name = name;\n    eventGroup.telemetryClient = telemetryClient;\n    return eventGroup;\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { telemetrySdkClientRTTI, telemetrySdkErrorEventGroupRTTI } from \"./telemetrySdkClient.rtti\";\nimport { TelemetrySdkClient } from \"./TelemetrySdkClient/TelemetrySdkClient\";\nimport { TelemetrySDKSessionData } from \"./TelemetrySdkClient/TelemetrySDKSessionData\";\nimport { createTelemetryClient, TelemetryEventGroup, TelemetryErrorEvent } from \"~/modules/telemetry\";\n\nexport const telemetrySdkClientModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<TelemetrySdkClient>(telemetrySdkClientRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            return createTelemetryClient<TelemetrySDKSessionData>(context.container, \"sdk-v1\");\n        })\n        .inSingletonScope();\n    bind<TelemetryEventGroup<TelemetryErrorEvent>>(telemetrySdkErrorEventGroupRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            const errorClient = context.container.get<TelemetrySdkClient>(telemetrySdkClientRTTI);\n            const group = errorClient.createEventGroup<TelemetryErrorEvent>();\n            return group;\n        })\n        .inSingletonScope();\n});\n","import { inject, injectable } from \"inversify\";\nimport { ErrorCode, InternalError, ThrowErrorFunction, throwErrorRTTI } from \"~/modules/error\";\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { TelemetryEventGroup } from \"~/modules/telemetry\";\nimport {\n    TelemetrySdkClient,\n    telemetrySdkClientRTTI,\n    TelemetrySdkEvent,\n    TelemetrySdkEventGroup,\n    TelemetrySdkEventName,\n    TelemetrySdkEventSource\n} from \"~/modules/telemetrySdkClient\";\nimport { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nimport { RateLimiterOptions } from \"~/modules/ratelimiter/RateLimiter/RateLimiterOptions\";\n\nconst defaultOptions = {\n    rateLimiterErrorCode: ErrorCode.TooManySDKRequests,\n    disableFeatureErrorCode: ErrorCode.TemporarilyDisabled,\n    disableFeatureThreshold: Number.MAX_VALUE\n};\n\n\n\n\n@injectable()\nexport class RateLimiterImpl implements RateLimiter {\n    #options: Required<RateLimiterOptions>;\n\n    #hitCountInTimeWindow: number = 0;\n\n    #rateLimitExceededCount: number = 0;\n\n    #resetTimeIntervalHandle: NodeJS.Timeout;\n\n    readonly #telemetryEventGroup: TelemetryEventGroup<TelemetrySdkEvent>;\n\n    readonly #logger: Logger;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(telemetrySdkClientRTTI) telemetryClient: TelemetrySdkClient,\n        @inject(loggerFactoryRTTI) loggerFactory: LoggerFactory,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.#telemetryEventGroup = telemetryClient.createEventGroup(TelemetrySdkEventGroup.RateLimiter);\n        this.#logger = loggerFactory(LoggerName.RateLimiter);\n        this.#throwError = throwError;\n    }\n\n    setup(options: RateLimiterOptions) {\n        if (this.#options) {\n            throw new InternalError(\"RateLimiter is already initialized\");\n        }\n\n        if (options.timeWindow < 100) {\n            throw new InternalError(\"timeWindow should be >= 100\");\n        }\n\n        this.#options = {\n            maxHitsInTimeWindow: options.maxHitsInTimeWindow,\n            disableFeatureThreshold: options.disableFeatureThreshold || defaultOptions.disableFeatureThreshold,\n            timeWindow: options.timeWindow,\n            rateLimiterErrorCode: options.rateLimiterErrorCode || defaultOptions.rateLimiterErrorCode,\n            disableFeatureErrorCode: options.disableFeatureErrorCode || defaultOptions.disableFeatureErrorCode,\n            name: options.name\n        };\n        this.#resetTimeIntervalHandle = setInterval(this.#resetHitCountInTimeWindow, this.timeWindow);\n    }\n\n    get maxHitsInTimeWindow() {\n        return this.#options.maxHitsInTimeWindow;\n    }\n\n    get hitCountInTimeWindow() {\n        return this.#hitCountInTimeWindow;\n    }\n\n    get name() {\n        return this.#options.name;\n    }\n\n    get timeWindow() {\n        return this.#options.timeWindow;\n    }\n\n    check() {\n        if (!this.#options) {\n            throw new InternalError(\"Rate limiter not set up, call setup()\");\n        }\n\n        this.#increaseHitCountInTimeWindow();\n        this.#increaseExceededCountOnFirstTimeWindowLimitHit();\n\n        this.#reportRateLimitErrorIfNeeded();\n        this.#throwRateLimitErrorIfNeeded();\n    }\n\n    cleanup() {\n        clearInterval(this.#resetTimeIntervalHandle);\n    }\n\n    #resetHitCountInTimeWindow = () => {\n        this.#hitCountInTimeWindow = 0;\n        this.#logger.trace(`rate limiter window reset. name=\"${this.name}\"`);\n    };\n\n    #increaseHitCountInTimeWindow = () => {\n        this.#hitCountInTimeWindow += 1;\n    };\n\n    #increaseExceededCountOnFirstTimeWindowLimitHit = () => {\n        if (this.#hitCountInTimeWindow - 1 === this.#options.maxHitsInTimeWindow) {\n            this.#rateLimitExceededCount += 1;\n        }\n    };\n\n    #throwRateLimitErrorIfNeeded = () => {\n        if (this.#rateLimitExceededCount >= this.#options.disableFeatureThreshold) {\n            this.#logger.warn(\n                `temporarily disabled. name=\"${this.name}\", hitCount=${this.#hitCountInTimeWindow}, windowCount=${\n                    this.#rateLimitExceededCount\n                }`\n            );\n            this.#throwError(ErrorCode.TemporarilyDisabled, undefined, `Feature disabled by rate limiter ${this.name}`);\n        }\n\n        if (this.hitCountInTimeWindow > this.maxHitsInTimeWindow) {\n            this.#logger.warn(`rate limiter hit. name=\"${this.name}\", hitCount=${this.#hitCountInTimeWindow}`);\n            this.#throwError(ErrorCode.TooManySDKRequests, undefined, `Request blocked by rate limiter ${this.name}`);\n        }\n    };\n\n    #reportRateLimitErrorIfNeeded = () => {\n        if (this.#hitCountInTimeWindow - 1 === this.#options.maxHitsInTimeWindow) {\n            if (this.#rateLimitExceededCount === this.#options.disableFeatureThreshold) {\n                \n                this.#reportRateLimiterDisabledFeature();\n            } else if (this.#rateLimitExceededCount < this.#options.disableFeatureThreshold) {\n                \n                this.#reportRateLimitHit();\n            }\n        }\n    };\n\n    #reportRateLimitHit = () => {\n        this.#telemetryEventGroup.addEvents({\n            eventName: TelemetrySdkEventName.RateLimiterTriggered,\n            eventSource: TelemetrySdkEventSource.RateLimiter,\n            resource: {\n                id: this.#options.name\n            }\n        });\n    };\n\n    #reportRateLimiterDisabledFeature = () => {\n        this.#telemetryEventGroup.addEvents({\n            eventName: TelemetrySdkEventName.RateLimiterDisabledFeature,\n            eventSource: TelemetrySdkEventSource.RateLimiter,\n            resource: {\n                id: this.#options.name\n            }\n        });\n    };\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { cleanupRateLimiters } from \"~/modules/ratelimiter/cleanupRateLimiters/cleanupRateLimiters\";\nimport { createRateLimiter } from \"~/modules/ratelimiter/RateLimiterFactory/createRateLimiter/createRateLimiter\";\nimport { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nimport { RateLimiterFactory } from \"~/modules/ratelimiter/RateLimiterFactory/RateLimiterFactory\";\nimport { RateLimiterImpl } from \"~/modules/ratelimiter/RateLimiter/RateLimiterImpl/RateLimiterImpl\";\nimport { RateLimiterOptions } from \"~/modules/ratelimiter/RateLimiter/RateLimiterOptions\";\nimport {\n    cleanupRateLimitersRTTI,\n    rateLimiterFactoryRTTI,\n    rateLimiterMapRTTI,\n    rateLimiterRTTI\n} from \"~/modules/ratelimiter/ratelimiter.rtti\";\n\nexport const rateLimiterModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<RateLimiter>(rateLimiterRTTI).to(RateLimiterImpl);\n    bind<Map<string, RateLimiter>>(rateLimiterMapRTTI).toConstantValue(new Map());\n    bind<RateLimiterFactory>(rateLimiterFactoryRTTI).toFactory((context: interfaces.Context): RateLimiterFactory => {\n        return (options: RateLimiterOptions) => {\n            return createRateLimiter(context.container, options);\n        };\n    });\n    bind<Function>(cleanupRateLimitersRTTI).toDynamicValue((context: interfaces.Context) => {\n        return () => cleanupRateLimiters(context.container);\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { LocalStorageKeys } from \"../LocalStorage/LocalStorageKeys\";\n\nexport const clearLocalStorage =\n    ({ container }: interfaces.Context) =>\n    () => {\n        const getLogger = container.get<LoggerFactory>(loggerFactoryRTTI);\n        const logger = getLogger(LoggerName.Storage);\n        logger.debug(`Clearing out Flex SDK local storage cache`);\n        Object.values(LocalStorageKeys).forEach((key) => {\n            localStorage.removeItem(key);\n        });\n    };\n","import { injectable, inject } from \"inversify\";\nimport { Logger, LoggerName, loggerFactoryRTTI, LoggerFactory } from \"~/modules/logger\";\nimport { LocalStorage, CachedValue } from \"./LocalStorage\";\nimport { LocalStorageKeys } from \"./LocalStorageKeys\";\n\nconst msInHour = 60 * 60 * 1000;\nconst TTL = 24 * msInHour;\n\n@injectable()\nexport class LocalStorageImpl implements LocalStorage {\n    readonly #logger: Logger;\n\n    constructor(@inject(loggerFactoryRTTI) getLogger: LoggerFactory) {\n        this.#logger = getLogger(LoggerName.Storage);\n    }\n\n    getCachedItem<T = unknown>(key: LocalStorageKeys): undefined | T {\n        const serializedItem = localStorage.getItem(key);\n\n        if (!serializedItem) {\n            this.#logger.debug(`The ${key} cache item is not available`);\n            return undefined;\n        }\n\n        const item: CachedValue<T> = JSON.parse(serializedItem);\n        const now = new Date();\n\n        if (now.getTime() > item.expiry) {\n            localStorage.removeItem(key);\n            this.#logger.debug(`The ${key} cache item has expired`);\n            return undefined;\n        }\n\n        return item.value;\n    }\n\n    setCachedItem(key: LocalStorageKeys, value: unknown) {\n        const expiry = new Date().getTime() + TTL;\n\n        const item: CachedValue = {\n            value,\n            expiry\n        };\n\n        try {\n            localStorage.setItem(key, JSON.stringify(item));\n        } catch (err) {\n            \n            this.#logger.error(err);\n        }\n\n        this.#logger.debug(`Cached ${key}`);\n    }\n}\n","import \"reflect-metadata\";\n\nimport { Container } from \"inversify\";\n\nimport { authModuleContainer } from \"./modules/auth/auth.ioc\";\nimport { sessionModuleContainer } from \"./modules/session/session.ioc\";\nimport { clientModuleContainer } from \"./modules/client/client.ioc\";\nimport { errorModuleContainer } from \"./modules/error/error.ioc\";\nimport { eventsModuleContainer } from \"./modules/events/events.ioc\";\nimport { configModuleContainer } from \"./modules/config/config.ioc\";\nimport { websocketModuleContainer } from \"./modules/websocket/websocket.ioc\";\nimport { rbacModuleContainer } from \"./modules/rbac/rbac.ioc\";\nimport { loggerModuleContainer } from \"./modules/logger/logger.ioc\";\nimport { telemetryModuleContainer } from \"./modules/telemetry/telemetry.ioc\";\nimport { telemetrySdkClientModuleContainer } from \"./modules/telemetrySdkClient/telemetrySdkClient.ioc\";\nimport { rateLimiterModuleContainer } from \"./modules/ratelimiter/ratelimiter.ioc\";\nimport { storageModuleContainer } from \"~/modules/storage/storage.ioc\";\nimport { withContainer } from \"./backend/openApi.container\";\n\nexport function createContainer(): Container {\n    const container = new Container();\n    container.load(authModuleContainer);\n    container.load(configModuleContainer);\n    container.load(sessionModuleContainer);\n    container.load(clientModuleContainer);\n    container.load(errorModuleContainer);\n    container.load(eventsModuleContainer);\n    container.load(websocketModuleContainer);\n    container.load(rbacModuleContainer);\n    container.load(loggerModuleContainer);\n    container.load(telemetryModuleContainer);\n    container.load(telemetrySdkClientModuleContainer);\n    container.load(rateLimiterModuleContainer);\n    container.load(storageModuleContainer);\n    withContainer(container);\n    return container;\n}\n\nlet singletonContainer: Container;\nexport function getSingletonContainer(): Container {\n    if (!singletonContainer) {\n        singletonContainer = createContainer();\n    }\n\n    return singletonContainer;\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { ClearCache } from \"~/modules/storage/ClearCache/ClearCache\";\nimport { clearLocalStorage } from \"~/modules/storage/ClearCache/clearLocalStorage\";\nimport { LocalStorage } from \"./LocalStorage/LocalStorage\";\nimport { LocalStorageImpl } from \"./LocalStorage/LocalStorageImpl\";\nimport { clearCacheRTTI, localStorageRTTI } from \"./storage.rtti\";\n\nexport const storageModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<LocalStorage>(localStorageRTTI).to(LocalStorageImpl).inSingletonScope();\n    bind<ClearCache>(clearCacheRTTI).toDynamicValue(clearLocalStorage);\n});\n","import { interfaces } from \"inversify\";\nimport { ApiServiceBinder as TelemetryBinder } from \"./generated/Telemetry/ApiServiceBinder\";\nimport { ApiServiceBinder as ConfigurationServiceBinder } from \"./generated/Configuration/ApiServiceBinder\";\nimport { ApiServiceBinder as FeaturesBinder } from \"./generated/Features/ApiServiceBinder\";\nimport { ApiServiceBinder as FederatedAuthBinder } from \"./generated/FederatedAuth/ApiServiceBinder\";\n\nimport { TwilsockAdapter } from \"./TwilsockAdapter/TwilsockAdapter\";\nimport { twilsockAdapterRTTI, httpAdapterRTTI } from \"./backend.rtti\";\nimport { TwilsockAdapterImpl } from \"./TwilsockAdapter/TwilsockAdapterImpl\";\nimport { HttpAdapter } from \"./HttpAdapter/HttpAdapter\";\nimport { HttpAdapterImpl } from \"./HttpAdapter/HttpAdapterImpl\";\n\nexport function withContainer(container: interfaces.Container): void {\n    container.bind<TwilsockAdapter>(twilsockAdapterRTTI).to(TwilsockAdapterImpl).inSingletonScope();\n    container.bind<HttpAdapter>(httpAdapterRTTI).to(HttpAdapterImpl).inSingletonScope();\n\n    TelemetryBinder.with(container);\n    ConfigurationServiceBinder.with(container);\n    FeaturesBinder.with(container);\n    FederatedAuthBinder.with(container);\n}\n","export const localStorageRTTI = Symbol.for(\"localStorage\");\nexport const clearCacheRTTI = Symbol.for(\"clearCache\");\n","module.exports = require(\"core-js/modules/es.array.filter.js\");","module.exports = require(\"core-js/modules/es.object.get-own-property-descriptors.js\");","import { ErrorCode, FlexSdkError } from \"~/modules/error\";\n\nexport enum AuthenticationMethod {\n    HostedFlex = \"hosted-flex\",\n    Basic = \"basic\"\n}\n\nexport const makeAuthenticationHeaders = (method: AuthenticationMethod, token: string) => {\n    if (method === AuthenticationMethod.Basic) {\n        return new Headers({\n            Authorization: `Basic ${btoa(`token:${token}`)})`,\n            \"Content-Type\": \"application/json\"\n        });\n    }\n\n    if (method === AuthenticationMethod.HostedFlex) {\n        return new Headers({\n            \"x-flex-jwe\": token,\n            \"Content-Type\": \"application/json\"\n        });\n    }\n\n    throw new FlexSdkError(ErrorCode.InvalidParams);\n};\n","export const telemetrySdkClientRTTI = Symbol.for(\"TelemetrySdkClient\");\nexport const telemetrySdkErrorEventGroupRTTI = Symbol.for(\"TelemetrySdkErrorEventGroup\");\n","import camelcase from \"lodash/camelCase\";\nimport snakecase from \"lodash/snakeCase\";\nimport mapkeys from \"lodash/mapKeys\";\nimport transform from \"lodash/transform\";\nimport { assertNotCircularObject } from \"~/utils/assert\";\n\ninterface LooseObject {\n    [key: string]: unknown;\n}\n\nconst mapArrayKeys = <T extends object>(object: T[], cb: (key: string) => string) => {\n    const newArray = [] as object[];\n    object.forEach((item: T) => {\n        let newValue: T;\n        if (Array.isArray(item)) {\n            newValue = mapArrayKeys(item, cb) as T;\n        } else if (typeof item === \"object\") {\n            \n            newValue = mapAllKeys(item, cb) as T;\n        } else {\n            newValue = item;\n        }\n        newArray.push(newValue);\n    });\n    return newArray;\n};\n\nconst mapAllKeys = <T extends object>(object: T, cb: (key: string) => string) => {\n    \n    return transform<any, LooseObject>(\n        object,\n        (result: LooseObject, value: Object, key: string) => {\n            if (Array.isArray(value)) {\n                \n                result[`${cb(key)}`] = mapArrayKeys(value, cb);\n            } else if (value instanceof Object && !(value instanceof Date)) {\n                \n                result[`${cb(key)}`] = mapAllKeys(value, cb);\n            } else {\n                \n                result[`${cb(key)}`] = value;\n            }\n        },\n        {}\n    );\n};\n\nexport const mapKeysToCamelCase = <T extends object>(object: T): LooseObject =>\n    mapAllKeys(object, (key: string) => camelcase(key));\n\nconst mapRootKeysTo = <T extends object>(object: T, cb: (key: string) => string) =>\n    \n    mapkeys<any>(object, (_, key: string) => cb(key));\n\nexport const mapRootKeysToSnakeCase = <T extends object>(object: T): LooseObject =>\n    mapRootKeysTo(object, (key: string) => snakecase(key));\n\nexport const mapRootKeysToCamelCase = <T extends object>(object: T): object =>\n    mapRootKeysTo(object, (key: string) => camelcase(key));\n\nexport const mapAllKeysToSnakeCase = <T extends object>(object: T): LooseObject => {\n    assertNotCircularObject(object, \"key-value dictionary\");\n    return mapAllKeys(object, (key: string) => snakecase(key));\n};\n","export const sessionRTTI = Symbol.for(\"Session\");\nexport const sessionOptionsRTTI = Symbol.for(\"SessionOptions\");\n","module.exports = require(\"core-js/modules/es.map.js\");","export const clientRTTI = Symbol.for(\"Client\");\nexport const clientProviderRTTI = Symbol.for(\"ClientProvider\");\nexport const clientOptionsRTTI = Symbol.for(\"ClientOptions\");\nexport const clientMockOptionsRTTI = Symbol.for(\"ClientMockOptions\");\n","import { getMessage } from \"~/modules/error/ErrorCode/ErrorCodeHelper\";\nimport { ErrorCode } from \"~/modules/error/ErrorCode/ErrorCodes\";\nimport { ErrorSeverity } from \"~/modules/error/ErrorSeverity/ErrorSeverity\";\nimport { FlexSdkErrorMetadata } from \"~/modules/error/FlexSdkErrorMetadata/FlexSdkErrorMetadata\";\n\n\n\n\n\nexport class FlexSdkError extends Error {\n    readonly #details: string | undefined;\n\n    readonly #errorCode: ErrorCode;\n\n    readonly #wrappedError: Error | undefined;\n\n    readonly #metadata: FlexSdkErrorMetadata;\n\n    constructor(errorCode: ErrorCode, metadata?: FlexSdkErrorMetadata, details?: string, wrappedError?: Error) {\n        super(`${getMessage(errorCode) + (details !== undefined ? `: ${details}` : \"\")} (${errorCode})`);\n        this.#errorCode = errorCode;\n        this.#details = details;\n        this.#metadata = metadata || { severity: ErrorSeverity.Error };\n        this.#wrappedError = wrappedError;\n\n        Object.setPrototypeOf(this, FlexSdkError.prototype);\n    }\n\n    \n\n\n\n\n\n    public get code(): ErrorCode {\n        return this.#errorCode;\n    }\n\n    \n\n\n\n\n\n    public get details(): string | undefined {\n        return this.#details;\n    }\n\n    \n\n\n\n\n\n    public get wrappedError(): Error | undefined {\n        return this.#wrappedError;\n    }\n\n    \n\n\n\n\n\n    public get metadata(): FlexSdkErrorMetadata {\n        return { ...this.#metadata };\n    }\n}\n","module.exports = require(\"core-js/modules/es.array.includes.js\");","module.exports = require(\"core-js/modules/es.string.includes.js\");","module.exports = require(\"core-js/modules/es.regexp.exec.js\");","module.exports = require(\"core-js/modules/es.object.get-prototype-of.js\");","module.exports = require(\"core-js/modules/es.regexp.to-string.js\");","\n\n\nexport enum LoggerName {\n    Client = \"flex:Client\",\n    Error = \"flex:Error\",\n    Session = \"flex:Session\",\n    Twilsock = \"flex:Twilsock\",\n    Auth = \"flex:Auth\",\n    Config = \"flex:Config\",\n    RateLimiter = \"flex:RateLimiter\",\n    Sync = \"flex:Sync\",\n    SyncAdapter = \"flex:SyncAdapter\",\n    QueueStats = \"flex:QueueStats\",\n    Storage = \"flex:Storage\"\n    \n}\n\n\n\n\nexport enum SdkLoggerName {\n    Twilsock = \"twilsock\"\n}\n\n\n\n\nexport enum TelemetryLoggerName {\n    TelemetryClient = \"TelemetryClient\",\n    TelemetryProcessor = \"TelemetryProcessor\",\n    TelemetrySdkClient = \"TelemetrySdkClient\"\n}\n\n\n\n\nexport type InternalLoggerName = LoggerName | SdkLoggerName | TelemetryLoggerName;\n","module.exports = require(\"events\");","export const eventEmitterRTTI = Symbol.for(\"eventEmitter\");\n","module.exports = require(\"loglevel\");","module.exports = require(\"core-js/modules/es.array.slice.js\");","module.exports = require(\"core-js/modules/es.reflect.construct.js\");","module.exports = require(\"core-js/modules/es.string.replace.js\");","\n\n\n\nexport enum ErrorSeverity {\n    Fatal = \"fatal\",\n    Error = \"error\",\n    Warning = \"warning\",\n    Info = \"info\"\n}\n","export enum LocalStorageKeys {\n    AccountConfig = \"FLEX_SDK_CACHE_ACCOUNT_CONFIG\",\n    PublicConfig = \"FLEX_SDK_CACHE_PUBLIC_CONFIG\",\n    FeaturesConfig = \"FLEX_SDK_CACHE_FEATURES_CONFIG\"\n}\n","module.exports = require(\"lodash/cloneDeep\");","export type { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nexport type { RateLimiterFactory } from \"~/modules/ratelimiter/RateLimiterFactory/RateLimiterFactory\";\nexport type { RateLimiterOptions } from \"~/modules/ratelimiter/RateLimiter/RateLimiterOptions\";\n\nexport { rateLimiterFactoryRTTI, cleanupRateLimitersRTTI } from \"~/modules/ratelimiter/ratelimiter.rtti\";\n","import { InternalError } from \"~/modules/error\";\nimport { RetryOptions } from \"~/utils/retry/RetryOptions\";\n\nfunction calculateNextDelay(retryCount: number, initialDelay: number, backoff: \"exponential\" | \"linear\"): number {\n    if (backoff === \"exponential\") {\n        return 1.5 ** retryCount * initialDelay;\n    }\n    return (retryCount + 1) * initialDelay;\n}\n\nexport async function retry<T>(options: RetryOptions<T>): Promise<T> {\n    let retryCount = 0;\n    const maxDelay = 15 * 60 * 1000; \n    const initialDelay = typeof options.initialDelay !== \"undefined\" ? options.initialDelay : 100;\n    const maxAttempts = typeof options.maxAttempts !== \"undefined\" ? options.maxAttempts : 3;\n    const backoff = options.backoff || \"exponential\";\n    let errorToReturn;\n\n    if (maxAttempts < 1) {\n        throw new InternalError(\"The value of max retry attempts has to be bigger than 0\");\n    }\n\n    do {\n        try {\n            if (options.logger && retryCount > 0) {\n                options.logger.debug(\"Retry attempt: \", retryCount);\n            }\n\n            \n            return await options.functionToRetry();\n        } catch (error) {\n            if (!options.retryCondition(error)) {\n                return Promise.reject(error);\n            }\n            if (retryCount >= maxAttempts - 1) {\n                errorToReturn = error;\n                break;\n            }\n        }\n        let delay = calculateNextDelay(retryCount, initialDelay, backoff);\n\n        \n        if (delay > maxDelay) {\n            delay = maxDelay;\n        }\n\n        \n        await new Promise((resolve) => setTimeout(resolve, delay));\n    } while (retryCount++ < maxAttempts - 1);\n\n    return Promise.reject(errorToReturn);\n}\n","\n\n\n\n\n\nexport class TwilsockReplyError extends Error {\n    reply: {\n        status: {\n            code: number;\n        };\n    };\n}\n\nexport function isTwilsockReplyError(error: Error): boolean {\n    const hasReply = Object.prototype.hasOwnProperty.call(error, \"reply\");\n    const hasStatus = hasReply && Object.prototype.hasOwnProperty.call((error as TwilsockReplyError).reply, \"status\");\n    const hasCode =\n        hasStatus && Object.prototype.hasOwnProperty.call((error as TwilsockReplyError).reply.status, \"code\");\n\n    return hasReply && hasStatus && hasCode;\n}\n","module.exports = require(\"core-js/modules/es.array.reduce.js\");","export enum TwilsockEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    StateChanged = \"stateChanged\",\n    ConnectionError = \"connectionError\",\n    Connected = \"connected\",\n    Disconnected = \"disconnected\",\n    TokenUpdated = \"tokenUpdated\"\n}\n","module.exports = require(\"core-js/modules/es.array.from.js\");","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport enum Role {\n    Guest = \"guest\",\n    Agent = \"agent\",\n    Admin = \"admin\",\n    Supervisor = \"supervisor\"\n}\n","import cloneDeep from \"lodash/cloneDeep\";\nimport { SessionOptions } from \"~/modules/session\";\n\nconst defaultSessionOptions: SessionOptions = {\n    autoUpdateToken: true\n};\n\nexport function getDefaultSessionOptions(): SessionOptions {\n    return cloneDeep(defaultSessionOptions);\n}\n","import { interfaces } from \"inversify\";\nimport { Client, ClientOptions, clientRTTI, clientOptionsRTTI } from \"~/modules/client\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { mergeUserOptions } from \"~/utils/mergeUserOptions\";\nimport { assertNotEmptyString } from \"~/utils/assert\";\nimport {\n    TelemetrySdkEvent,\n    TelemetrySdkEventGroup,\n    TelemetrySdkEventName,\n    TelemetrySdkEventSource,\n    TelemetrySdkClient,\n    telemetrySdkClientRTTI,\n    SDKDependency\n} from \"~/modules/telemetrySdkClient\";\n\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport {\n    ErrorCode,\n    throwErrorFromErrorResponseRTTI,\n    ThrowErrorFromErrorResponseFunction,\n    ErrorSeverity,\n    ThrowErrorFunction,\n    throwErrorRTTI\n} from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { DeepPartial } from \"~/utils/DeepPartial\";\n\nconst sendClientInitEvent = async (logger: Logger, telemetrySdkClient: TelemetrySdkClient, durationInMs: number) => {\n    try {\n        const group = telemetrySdkClient.createEventGroup<TelemetrySdkEvent>(TelemetrySdkEventGroup.Default);\n        await group.addEvents({\n            eventName: TelemetrySdkEventName.ClientInitialized,\n            eventSource: TelemetrySdkEventSource.Client,\n            durationMs: durationInMs\n        });\n    } catch (e) {\n        logger.error(\"Failed to send client init event\", e);\n    }\n};\n\nexport async function createClient(\n    container: interfaces.Container,\n    token: string,\n    userOptions?: DeepPartial<ClientOptions>\n): Promise<Client> {\n    const t0Ms = Date.now();\n\n    assertNotEmptyString(token, \"token\");\n    const clientOptions = container.get<ClientOptions>(clientOptionsRTTI);\n    const getLogger = container.get<LoggerFactory>(loggerFactoryRTTI);\n    const logger = getLogger(LoggerName.Client);\n    const throwError = container.get<ThrowErrorFunction>(throwErrorRTTI);\n    const throwErrorFromErrorResponse = container.get<ThrowErrorFromErrorResponseFunction>(\n        throwErrorFromErrorResponseRTTI\n    );\n\n    mergeUserOptions(clientOptions, userOptions);\n\n    const session = container.get<Session>(sessionRTTI);\n\n    try {\n        await session.init(token);\n    } catch (err) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        \n        \n        if (err.code === 51102 || err.code === 20003) {\n            metadata.source = \"Twilsock\";\n            \n            throwError(ErrorCode.Forbidden, metadata, \"Insufficient permissions\", err.source);\n        } else {\n            throwErrorFromErrorResponse(err, metadata);\n        }\n    }\n\n    try {\n        const telemetrySessionData = {\n            dependencies: {\n                [SDKDependency.Twilsock]: \"default\"\n            }\n        };\n\n        const telemetrySdkClient = container.get<TelemetrySdkClient>(telemetrySdkClientRTTI);\n        await telemetrySdkClient.setSessionData(telemetrySessionData);\n\n        const durationMs = Date.now() - t0Ms;\n        \n        await sendClientInitEvent(logger, telemetrySdkClient, durationMs);\n    } catch (e) {\n        logger.error(\"Failed to set session data for telemetry\", e);\n    }\n\n    const client = container.get<Client>(clientRTTI);\n    return client;\n}\n","import { injectable, inject } from \"inversify\";\nimport { ClientOptions } from \"~/modules/client\";\nimport { SessionOptions, sessionOptionsRTTI } from \"~/modules/session\";\nimport { LoggerOptions, loggerOptionsRTTI } from \"~/modules/logger\";\nimport { TelemetryOptions, telemetryOptionsRTTI } from \"~/modules/telemetry\";\nimport { AccountConfigOptions, accountConfigOptionsRTTI } from \"~/modules/config\";\n\n@injectable()\nexport class ClientOptionsStore implements ClientOptions {\n    readonly #session: SessionOptions;\n\n    readonly #logger: LoggerOptions;\n\n    readonly #telemetry: TelemetryOptions;\n\n    readonly #accountConfig: AccountConfigOptions;\n\n    \n    \n    #region: string;\n\n    #appName: string;\n\n    #appVersion: string;\n\n    constructor(\n        @inject(sessionOptionsRTTI) session: SessionOptions,\n        @inject(loggerOptionsRTTI) logger: LoggerOptions,\n        @inject(telemetryOptionsRTTI) telemetry: TelemetryOptions,\n        @inject(accountConfigOptionsRTTI) accountConfig: AccountConfigOptions\n    ) {\n        this.#session = session;\n        this.#logger = logger;\n        this.#telemetry = telemetry;\n        this.#accountConfig = accountConfig;\n    }\n\n    get session(): SessionOptions {\n        return this.#session;\n    }\n\n    get logger(): LoggerOptions {\n        return this.#logger;\n    }\n\n    get telemetry(): TelemetryOptions {\n        return this.#telemetry;\n    }\n\n    get accountConfig(): AccountConfigOptions {\n        return this.#accountConfig;\n    }\n\n    get region(): string {\n        return this.#region;\n    }\n\n    set region(value: string) {\n        this.#region = value;\n    }\n\n    get appName(): string {\n        return this.#appName;\n    }\n\n    set appName(value: string) {\n        this.#appName = value;\n    }\n\n    get appVersion(): string {\n        return this.#appVersion;\n    }\n\n    set appVersion(value: string) {\n        this.#appVersion = value;\n    }\n}\n","import { injectable } from \"inversify\";\nimport { AccountConfigData } from \"~/backend/generated/Configuration/model/accountConfigData\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\nimport { InternalError } from \"~/modules/error\";\n\n@injectable()\nexport class AccountConfigDataContainer implements ConfigDataContainer<AccountConfigData> {\n    #data?: AccountConfigData;\n\n    get(): AccountConfigData {\n        if (!this.#data) {\n            throw new InternalError(\"Config data hasn't been fetched\");\n        }\n        return this.#data;\n    }\n\n    set(data: AccountConfigData): void {\n        this.#data = data;\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { AccountConfigData } from \"~/backend/generated/Configuration/model/accountConfigData\";\nimport { AccountConfigProvider } from \"../AccountConfigProvider/AccountConfigProvider\";\nimport { AccountConfigOptions } from \"../AccountConfigOptions/AccountConfigOptions\";\nimport { accountConfigProviderRTTI } from \"../config.rtti\";\n\nexport const getAccountConfigData =\n    (container: interfaces.Container) =>\n    async (sessionToken: string, options?: AccountConfigOptions): Promise<AccountConfigData> => {\n        const configProvider = container.get<AccountConfigProvider>(accountConfigProviderRTTI);\n        const config = await configProvider(sessionToken, options);\n        return config.get();\n    };\n","import { interfaces } from \"inversify\";\nimport { FeaturesConfig } from \"~/backend/generated/Features/model/featuresConfig\";\nimport { FeaturesProvider, featuresProviderRTTI } from \"~/modules/config\";\n\nexport const getFeaturesConfig =\n    (container: interfaces.Container) =>\n    async (token: string): Promise<FeaturesConfig> => {\n        const configProvider = container.get<FeaturesProvider>(featuresProviderRTTI);\n        const config = await configProvider(token);\n        return config;\n    };\n","import { interfaces } from \"inversify\";\n\nimport twilsockLoglevel from \"loglevels/twilsock\";\nimport * as defaultLoglevel from \"loglevel\";\n\nimport {\n    loglevelFactoryRTTI,\n    newableLoggerRTTI,\n    defaultPluginsRTTI,\n    loggerOptionsRTTI,\n    loggerInstancesRTTI\n} from \"~/modules/logger/logger.rtti\";\nimport { LoglevelFactory, LoggerPlugin, LoggerInstances } from \"./LoggerFactory\";\nimport { LoggerOptions, Logger, Loglevel } from \"~/modules/logger\";\nimport { assertString } from \"~/utils/assert\";\nimport { InternalLoggerName, SdkLoggerName } from \"~/modules/logger/Logger/LoggerName\";\nimport { NewableLogger } from \"~/modules/logger/Logger/Logger\";\n\nconst sdkLoggerNameToLoglevel: { [name in SdkLoggerName]: defaultLoglevel.RootLogger } = {\n    [SdkLoggerName.Twilsock]: twilsockLoglevel\n};\n\nconst getSdkLoglevel = (name: SdkLoggerName) => {\n    return sdkLoggerNameToLoglevel[name].getLogger(name);\n};\n\nexport const getLogger =\n    (container: interfaces.Container) =>\n    (name: InternalLoggerName): Logger => {\n        assertString(name, \"name\");\n\n        const loggers = container.get<LoggerInstances>(loggerInstancesRTTI);\n        let logger = loggers.get(name);\n        if (logger) {\n            return logger;\n        }\n\n        const defaultLevel = container.get<LoggerOptions>(loggerOptionsRTTI).level;\n        const loglevelFactory = container.get<LoglevelFactory>(loglevelFactoryRTTI);\n        const plugins = container.get<LoggerPlugin[]>(defaultPluginsRTTI);\n\n        let loglevel;\n        if (Object.keys(sdkLoggerNameToLoglevel).includes(name)) {\n            loglevel = getSdkLoglevel(name as SdkLoggerName);\n        } else {\n            loglevel = loglevelFactory(name);\n        }\n\n        loglevel = plugins.reduce((instance: Loglevel, plugin: LoggerPlugin) => plugin(instance), loglevel);\n\n        const LoggerConstructor = container.get<NewableLogger>(newableLoggerRTTI);\n        logger = new LoggerConstructor(loglevel);\n\n        logger.setLevel(defaultLevel);\n\n        loggers.set(name, logger);\n        return logger;\n    };\n","import cloneDeep from \"lodash/cloneDeep\";\nimport { LoggerOptions } from \"~/modules/logger\";\n\nconst defaultLoggerOptions: LoggerOptions = {\n    level: \"ERROR\"\n};\n\nexport function getDefaultLoggerOptions(): LoggerOptions {\n    return cloneDeep(defaultLoggerOptions);\n}\n","import { TelemetryOptions } from \"./TelemetryOptions\";\n\nexport function getDefaultTelemetryOptions(): TelemetryOptions {\n    return {\n        reportErrors: true\n    };\n}\n","import { interfaces } from \"inversify\";\nimport { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nimport { rateLimiterMapRTTI } from \"~/modules/ratelimiter/ratelimiter.rtti\";\n\nexport function cleanupRateLimiters(container: interfaces.Container) {\n    const rateLimiters = container.get<Map<string, RateLimiter>>(rateLimiterMapRTTI);\n    rateLimiters.forEach((value) => value.cleanup());\n    rateLimiters.clear();\n}\n","import { interfaces } from \"inversify\";\nimport { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nimport { RateLimiterOptions } from \"~/modules/ratelimiter/RateLimiter/RateLimiterOptions\";\nimport { rateLimiterMapRTTI, rateLimiterRTTI } from \"~/modules/ratelimiter/ratelimiter.rtti\";\n\nexport function createRateLimiter<T extends RateLimiter = RateLimiter>(\n    container: interfaces.Container,\n    options: RateLimiterOptions\n): T {\n    const rateLimiters = container.get<Map<string, T>>(rateLimiterMapRTTI);\n\n    let rateLimiter = rateLimiters.get(options.name);\n    if (!rateLimiter) {\n        rateLimiter = container.get<T>(rateLimiterRTTI);\n        rateLimiter.setup(options);\n        rateLimiters.set(options.name, rateLimiter);\n    }\n\n    return rateLimiter;\n}\n","import { interfaces } from \"inversify\";\n\nimport { TelemetryServiceImpl } from \"./api/telemetry.service\";\nimport { TelemetryService } from \"./api/telemetry.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<TelemetryService>(\"TelemetryService\").to(TelemetryServiceImpl).inSingletonScope();\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { ConfigurationServiceImpl } from \"./api/configuration.service\";\nimport { ConfigurationService } from \"./api/configuration.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<ConfigurationService>(\"ConfigurationService\").to(ConfigurationServiceImpl).inSingletonScope();\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { FeaturesServiceImpl } from \"./api/features.service\";\nimport { FeaturesService } from \"./api/features.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<FeaturesService>(\"FeaturesService\").to(FeaturesServiceImpl).inSingletonScope();\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { FederatedAuthServiceImpl } from \"./api/federatedAuth.service\";\nimport { FederatedAuthService } from \"./api/federatedAuth.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<FederatedAuthService>(\"FederatedAuthService\").to(FederatedAuthServiceImpl).inSingletonScope();\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport { Twilsock, twilsockRTTI, TwilsockResult } from \"~/modules/websocket\";\nimport { TwilsockAdapter } from \"./TwilsockAdapter\";\n\n@injectable()\nexport class TwilsockAdapterImpl implements TwilsockAdapter {\n    readonly #twilsock: Twilsock;\n\n    constructor(@inject(twilsockRTTI) twilsockInjected: Twilsock) {\n        this.#twilsock = twilsockInjected;\n    }\n\n    public async post<U>(url: string, body: object): Promise<TwilsockResult<U>> {\n        const result = await this.#twilsock.post<U>(url, {}, body);\n        return result;\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport {\n    ErrorCode,\n    ErrorSeverity,\n    InternalError,\n    ThrowErrorFromResponseFunction,\n    throwErrorFromResponseRTTI,\n    ThrowErrorFunction,\n    throwErrorRTTI\n} from \"~/modules/error\";\nimport { sessionRTTI, Session } from \"~/modules/session\";\nimport { HttpAdapter } from \"./HttpAdapter\";\nimport { EnvironmentConfig, environmentConfigRTTI } from \"~/modules/config\";\nimport { mapRootKeysToCamelCase, mapRootKeysToSnakeCase } from \"~/utils/mapKeys\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\nimport { retry } from \"~/utils/retry/retry\";\nimport { defaultRetryConditionOnFlexSdkError } from \"~/utils/defaultRetryConditionOnFlexSdkError\";\nimport { AuthenticationMethod, makeAuthenticationHeaders } from \"./authenticationMethods\";\n\n@injectable()\nexport class HttpAdapterImpl implements HttpAdapter {\n    private readonly session: Session;\n\n    private readonly envConfig: EnvironmentConfig;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    readonly #throwErrorFromResponse: ThrowErrorFromResponseFunction;\n\n    constructor(\n        @inject(sessionRTTI) session: Session,\n        @inject(environmentConfigRTTI) envConfig: EnvironmentConfig,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction,\n        @inject(throwErrorFromResponseRTTI) throwErrorFromResponse: ThrowErrorFromResponseFunction\n    ) {\n        this.session = session;\n        this.envConfig = envConfig;\n        this.#throwError = throwError;\n        this.#throwErrorFromResponse = throwErrorFromResponse;\n    }\n\n    public get<T>(url: string, authMethod?: AuthenticationMethod, options?: { [key: string]: unknown }): Promise<T> {\n        return this.performNetworkCall<T>(url, \"GET\", authMethod, undefined, options);\n    }\n\n    public post<T>(\n        url: string,\n        authMethod?: AuthenticationMethod,\n        body?: {},\n        options?: { [key: string]: unknown }\n    ): Promise<T> {\n        return this.performNetworkCall<T>(url, \"POST\", authMethod, body, options);\n    }\n\n    public put<T>(url: string, authMethod?: AuthenticationMethod, body?: {}): Promise<T> {\n        return this.performNetworkCall<T>(url, \"PUT\", authMethod, body);\n    }\n\n    public delete<T>(url: string, authMethod?: AuthenticationMethod): Promise<T> {\n        return this.performNetworkCall<T>(url, \"DELETE\", authMethod);\n    }\n\n    private getRequestData(\n        method: string,\n        authMethod?: AuthenticationMethod,\n        body?: object,\n        options?: { [key: string]: unknown }\n    ): { headers: Headers | undefined; method: string; body: string } {\n        let headers;\n\n        if (authMethod) {\n            headers = makeAuthenticationHeaders(authMethod, this.#getToken(options?.token));\n        } else {\n            headers = new Headers({\n                \"Content-Type\": \"application/json\"\n            });\n        }\n\n        return { headers, method, body: JSON.stringify(body) };\n    }\n\n    private getEnvironmentSpecificUrl(url: string): string {\n        let urlEnvSpecifier = \"\";\n        const region = this.envConfig.region || \"\";\n        if (region.startsWith(\"dev-\")) {\n            urlEnvSpecifier = \".dev\";\n        } else if (region.startsWith(\"stage-\")) {\n            urlEnvSpecifier = \".stage\";\n        }\n        return url.replace(\"[environment]\", urlEnvSpecifier);\n    }\n\n    private mapBody(body: object | undefined): { [key: string]: unknown } | undefined {\n        if (body) {\n            return mapRootKeysToSnakeCase(body);\n        }\n        return body;\n    }\n\n    #mapStatusCodeToFlexSdkErrorCode = (statusCode: number): ErrorCode | undefined => {\n        const HTTPS_STATUS_CODE_TOO_MANY_REQUESTS = 429;\n        const HTTPS_STATUS_CODE_INTERNAL_SERVER_ERROR = 500;\n\n        let errorCode;\n        if (statusCode === HTTPS_STATUS_CODE_TOO_MANY_REQUESTS) {\n            errorCode = ErrorCode.TooManyRequests;\n        } else if (statusCode >= HTTPS_STATUS_CODE_INTERNAL_SERVER_ERROR) {\n            errorCode = ErrorCode.Unknown;\n        }\n        return errorCode;\n    };\n\n    #handleErrorResponse = async (response: Response): Promise<void> => {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        const flexSdkErrorCode = this.#mapStatusCodeToFlexSdkErrorCode(response.status);\n\n        if (flexSdkErrorCode) {\n            this.#throwError(flexSdkErrorCode, metadata);\n        }\n        await this.#throwErrorFromResponse(response, metadata);\n    };\n\n    private async performNetworkCall<T>(\n        url: string,\n        method: string,\n        authMethod?: AuthenticationMethod,\n        body?: object,\n        options?: { [key: string]: unknown }\n    ): Promise<T> {\n        return retry({\n            functionToRetry: () => this.#performNetworkCallOnce<T>(url, method, authMethod, body, options),\n            retryCondition: defaultRetryConditionOnFlexSdkError\n        });\n    }\n\n    #performNetworkCallOnce = async <T>(\n        url: string,\n        method: string,\n        authMethod?: AuthenticationMethod,\n        body?: object,\n        options?: { [key: string]: unknown }\n    ): Promise<T> => {\n        const environmentSpecificUrl = this.getEnvironmentSpecificUrl(url);\n        let response: Response;\n\n        try {\n            response = await fetch(\n                environmentSpecificUrl,\n                this.getRequestData(method, authMethod, this.mapBody(body), options)\n            );\n        } catch (e) {\n            this.#throwError(ErrorCode.NetworkError, undefined, undefined, e);\n        }\n\n        if (!response.ok) {\n            await this.#handleErrorResponse(response);\n        }\n        const result = await response.json();\n\n        return mapRootKeysToCamelCase(result) as Promise<T>;\n    };\n\n    #getToken = (token?: unknown) => {\n        if (!token) {\n            return this.session.token;\n        }\n\n        if (typeof token === \"string\") {\n            return token;\n        }\n\n        throw new InternalError(\"No token in request body\");\n    };\n}\n","module.exports = require(\"lodash/camelCase\");","module.exports = require(\"lodash/snakeCase\");","module.exports = require(\"core-js/modules/es.object.values.js\");","module.exports = require(\"core-js/modules/es.number.constructor.js\");","module.exports = require(\"core-js/modules/es.string.trim.js\");","module.exports = require(\"core-js/modules/es.string.match.js\");","module.exports = require(\"core-js/modules/es.array.map.js\");","module.exports = require(\"twilsock\");","import mergeWith from \"lodash/mergeWith\";\nimport { ErrorCode, ErrorSeverity, FlexSdkError } from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { assertObject } from \"./assert\";\nimport { DeepPartial } from \"./DeepPartial\";\n\nexport function mergeUserOptions<T>(options: T, userOptions?: DeepPartial<T>): void {\n    if (typeof userOptions !== \"undefined\") {\n        assertObject(userOptions, \"userOptions\");\n    }\n\n    \n    const customMerger = (\n        value: undefined | Object,\n        _srcValue: never,\n        key: string,\n        \n        _object: object,\n        \n        _source: never\n    ) => {\n        const objectHasKey = Object.prototype.hasOwnProperty.call(_object, key);\n        \n        const objectHasGetterForKey = Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(_object), key);\n        if (!objectHasKey && !objectHasGetterForKey) {\n            const metadata = {\n                module: extractModuleFromPath(__dirname),\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            \n            throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${key} is not a valid property`);\n        }\n\n        return undefined; \n    };\n\n    mergeWith(options, userOptions, customMerger);\n}\n","module.exports = require(\"lodash/mergeWith\");","import { interfaces } from \"inversify\";\nimport {\n    AccountConfig,\n    AccountConfigData,\n    accountConfigRTTI,\n    configDataContainerRTTI,\n    AccountConfigOptions\n} from \"~/modules/config\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { ThrowAndReportErrorFunction, throwAndReportErrorRTTI, ErrorSeverity, ErrorCode } from \"~/modules/error\";\nimport { LocalStorage, localStorageRTTI, LocalStorageKeys } from \"~/modules/storage\";\nimport { ClientOptions, clientOptionsRTTI } from \"~/modules/client\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\n\nconst metadata = {\n    module: extractModuleFromPath(__dirname),\n    eventSource: extractFileNameFromPath(__filename)\n};\n\n\n\n\nexport type AccountConfigProvider = (sessionToken: string, options?: AccountConfigOptions) => Promise<AccountConfig>;\n\n\n\n\nexport const accountConfigProvider =\n    (container: interfaces.Container) =>\n    async (sessionToken: string, options: AccountConfigOptions = {}): Promise<AccountConfig> => {\n        const dataContainer = container.get<ConfigDataContainer<AccountConfigData>>(configDataContainerRTTI);\n        const configurationService: ConfigurationService =\n            container.get<ConfigurationService>(configurationServiceRTTI);\n        const throwAndReportError = container.get<ThrowAndReportErrorFunction>(throwAndReportErrorRTTI);\n        const storage = container.get<LocalStorage>(localStorageRTTI);\n        const logger = container.get<LoggerFactory>(loggerFactoryRTTI)(LoggerName.Config);\n        const clientOptions: ClientOptions = container.get<ClientOptions>(clientOptionsRTTI);\n\n        let configData: AccountConfigData;\n\n        const uiVersion = clientOptions?.accountConfig.query?.UiVersion || options?.query?.UiVersion;\n\n        try {\n            configData = await configurationService.fetchConfiguration(\"UiVersion\", uiVersion, {\n                token: sessionToken\n            });\n            storage.setCachedItem(LocalStorageKeys.AccountConfig, configData);\n        } catch (err) {\n            const cachedConfig = storage.getCachedItem<AccountConfigData>(LocalStorageKeys.AccountConfig);\n\n            if (cachedConfig === undefined) {\n                const message = `Failed to fetch account configuration: ${err}. No cache found.`;\n                const errorCode = err.code || ErrorCode.Unknown;\n                return throwAndReportError(errorCode, { ...metadata, severity: ErrorSeverity.Error }, message);\n            }\n\n            cachedConfig.dateCreated = new Date(cachedConfig.dateCreated);\n            cachedConfig.dateUpdated = new Date(cachedConfig.dateUpdated);\n\n            logger.warn(`Failed to fetch account configuration: ${err}. Using cache instead`);\n            configData = cachedConfig;\n        }\n        dataContainer.set(configData);\n\n        const accountConfig = container.get<AccountConfig>(accountConfigRTTI);\n        return accountConfig;\n    };\n","import { interfaces } from \"inversify\";\nimport { RuntimeDomainOption, AccountSidOption, PublicConfig } from \"~/modules/config\";\nimport {\n    ErrorCode,\n    ErrorSeverity,\n    ThrowAndReportErrorFunction,\n    throwAndReportErrorRTTI,\n    ThrowErrorFunction,\n    throwErrorRTTI\n} from \"~/modules/error\";\nimport { LocalStorage, localStorageRTTI, LocalStorageKeys } from \"~/modules/storage\";\nimport { XOR } from \"~/utils/utilityTypes\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { PublicConfigResponse } from \"~/backend/generated/Configuration/model/publicConfigResponse\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\nimport { mapRootKeysToCamelCase } from \"~/utils/mapKeys\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\n\nconst TWILIO_DOMAIN = \".twil.io\";\nconst RUNTIME_DOMAIN_REGEXP = /^([a-z]+-[a-z]+-\\d+)$/;\n\nconst metadata = {\n    module: extractModuleFromPath(__dirname),\n    eventSource: extractFileNameFromPath(__filename)\n};\n\nfunction sanitizeRuntimeDomain(domain: string): string {\n    let sanitizedDomain = domain.trim();\n\n    if (sanitizedDomain.endsWith(\"/\")) {\n        sanitizedDomain = sanitizedDomain.replace(/\\/$/, \"\");\n    }\n\n    if (!sanitizedDomain.endsWith(TWILIO_DOMAIN)) {\n        const parsedRuntimeDomain = sanitizedDomain.match(RUNTIME_DOMAIN_REGEXP);\n        if (parsedRuntimeDomain && parsedRuntimeDomain[1]) {\n            sanitizedDomain += TWILIO_DOMAIN;\n        }\n    }\n\n    return sanitizedDomain;\n}\n\nfunction isAccountSidOption(option: XOR<AccountSidOption, RuntimeDomainOption>): option is AccountSidOption {\n    return !!(option as AccountSidOption).accountSid;\n}\n\nfunction getPublicConfigQueryParam(option: XOR<AccountSidOption, RuntimeDomainOption>): {\n    paramName: \"AccountSid\" | \"RuntimeDomain\";\n    paramValue: string;\n} {\n    if (isAccountSidOption(option)) {\n        const accountSid = (option as AccountSidOption).accountSid;\n        return { paramName: \"AccountSid\", paramValue: accountSid };\n    }\n\n    const runtimeDomain = (option as RuntimeDomainOption).runtimeDomain;\n    const sanitizedDomain = sanitizeRuntimeDomain(runtimeDomain);\n    return { paramName: \"RuntimeDomain\", paramValue: sanitizedDomain };\n}\n\nexport async function getPublicConfig(\n    container: interfaces.Container,\n    option: XOR<AccountSidOption, RuntimeDomainOption>\n): Promise<PublicConfig> {\n    const configurationService = container.get<ConfigurationService>(configurationServiceRTTI);\n    const throwError = container.get<ThrowErrorFunction>(throwErrorRTTI);\n    const throwAndReportError = container.get<ThrowAndReportErrorFunction>(throwAndReportErrorRTTI);\n    const storage = container.get<LocalStorage>(localStorageRTTI);\n    const logger = container.get<LoggerFactory>(loggerFactoryRTTI)(LoggerName.Config);\n    const queryParam = getPublicConfigQueryParam(option);\n    let responseData: PublicConfigResponse;\n\n    try {\n        responseData = await configurationService.fetchPublicConfiguration(queryParam.paramName, queryParam.paramValue);\n        storage.setCachedItem(LocalStorageKeys.PublicConfig, responseData);\n    } catch (err) {\n        const cachedConfig = storage.getCachedItem<PublicConfigResponse>(LocalStorageKeys.PublicConfig);\n\n        if (cachedConfig === undefined) {\n            const message = `Failed to fetch public configuration: ${err}. No cache found.`;\n            const errorCode = err.code || ErrorCode.Unknown;\n            return throwAndReportError(errorCode, { ...metadata, severity: ErrorSeverity.Error }, message);\n        }\n\n        logger.warn(`Failed to fetch public configuration: ${err}. Using cache instead`);\n        responseData = cachedConfig;\n    }\n\n    if (!(responseData && responseData.configurations && responseData.configurations.length)) {\n        throwError(\n            ErrorCode.SDK,\n            { ...metadata, severity: ErrorSeverity.Error },\n            \"Invalid response from public configuration endpoint\"\n        );\n    }\n\n    return mapRootKeysToCamelCase(responseData.configurations[0]) as PublicConfig;\n}\n","module.exports = require(\"lodash/mapKeys\");","module.exports = require(\"lodash/transform\");","import { interfaces } from \"inversify\";\nimport { FeaturesConfig } from \"../FeaturesProvider\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { ThrowAndReportErrorFunction, throwAndReportErrorRTTI, ErrorSeverity, ErrorCode } from \"~/modules/error\";\nimport { LocalStorage, localStorageRTTI, LocalStorageKeys } from \"~/modules/storage\";\nimport { featuresServiceRTTI } from \"~/backend/backend.rtti\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { FeaturesService } from \"~/backend/generated/Features/api/features.serviceInterface\";\n\nconst metadata = {\n    module: extractModuleFromPath(__dirname),\n    eventSource: extractFileNameFromPath(__filename)\n};\n\nexport const featuresProviderImpl =\n    ({ container }: interfaces.Context) =>\n    async (sessionToken: string): Promise<FeaturesConfig> => {\n        const featuresService = container.get<FeaturesService>(featuresServiceRTTI);\n        const throwAndReportError = container.get<ThrowAndReportErrorFunction>(throwAndReportErrorRTTI);\n        const storage = container.get<LocalStorage>(localStorageRTTI);\n        const logger = container.get<LoggerFactory>(loggerFactoryRTTI)(LoggerName.Config);\n\n        let featuresData: FeaturesConfig;\n\n        try {\n            featuresData = await featuresService.fetchFeatures({ token: sessionToken });\n            storage.setCachedItem(LocalStorageKeys.FeaturesConfig, featuresData);\n        } catch (err) {\n            const cachedFeatures = storage.getCachedItem<FeaturesConfig>(LocalStorageKeys.FeaturesConfig);\n\n            if (cachedFeatures === undefined) {\n                const message = `Failed to fetch features: ${err}. No cache found.`;\n                const errorCode = err.code || ErrorCode.Unknown;\n                return throwAndReportError(errorCode, { ...metadata, severity: ErrorSeverity.Error }, message);\n            }\n\n            logger.warn(`Failed to fetch features: ${err}. Using cache instead`);\n            featuresData = cachedFeatures;\n        }\n\n        return featuresData;\n    };\n","import { injectable, inject } from \"inversify\";\nimport loglevel from \"loglevel\";\nimport { version } from \"package.json\";\nimport { eventEmitterRTTI, Emitter } from \"~/modules/events\";\nimport { TwilsockClient, TwilsockClientEvent } from \"~/modules/websocket/TwilsockClient/TwilsockClient\";\nimport { productIdRTTI, twilsockClientFactoryRTTI } from \"~/modules/websocket/websocket.rtti\";\nimport { Headers, Twilsock, TwilsockResult, TwilsockEvent } from \"~/modules/websocket\";\nimport {\n    ErrorCode,\n    FlexSdkError,\n    throwErrorRTTI,\n    throwErrorFromErrorResponseRTTI,\n    ThrowErrorFunction,\n    ThrowErrorFromErrorResponseFunction,\n    InternalError,\n    ErrorSeverity\n} from \"~/modules/error\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName, LoglevelMethodName } from \"~/modules/logger\";\nimport { environmentConfigRTTI, EnvironmentConfig } from \"~/modules/config\";\nimport { ClientOptions, clientOptionsRTTI } from \"~/modules/client\";\nimport { retry } from \"~/utils/retry/retry\";\nimport { TwilsockClientFactory } from \"~/modules/websocket/TwilsockClientFactory/TwilsockClientFactory\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { DeepPartial } from \"~/utils/DeepPartial\";\nimport { isTwilsockReplyError, TwilsockReplyError } from \"~/modules/websocket/Twilsock/TwilsockReplyError\";\n\nconst FLEX_SDK_NAME = \"flex-sdk\";\nconst FLEX_SDK_PLATFORM = \"JS\";\n\n@injectable()\nexport class TwilsockImpl implements Twilsock {\n    readonly #productId: string;\n\n    readonly #twilsockClientFactory: TwilsockClientFactory;\n\n    \n    \n    private twilsockClient?: TwilsockClient;\n\n    readonly #logger: Logger;\n\n    readonly #environmentConfig: EnvironmentConfig;\n\n    readonly #clientOptions: DeepPartial<ClientOptions>;\n\n    readonly #emitter: Emitter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    readonly #throwErrorFromErrorResponse: ThrowErrorFromErrorResponseFunction;\n\n    constructor(\n        @inject(twilsockClientFactoryRTTI) twilsockClientFactory: TwilsockClientFactory,\n        @inject(productIdRTTI) productId: string,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(environmentConfigRTTI) environmentConfig: EnvironmentConfig,\n        @inject(clientOptionsRTTI) clientOptions: DeepPartial<ClientOptions>,\n        @inject(eventEmitterRTTI) emitter: Emitter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction,\n        @inject(throwErrorFromErrorResponseRTTI) throwErrorFromErrorResponse: ThrowErrorFromErrorResponseFunction\n    ) {\n        this.#twilsockClientFactory = twilsockClientFactory;\n        this.#productId = productId;\n        this.#logger = getLogger(LoggerName.Twilsock);\n        this.#logger.debug(\"Twilsock constructed\");\n        this.#environmentConfig = environmentConfig;\n        this.#clientOptions = clientOptions;\n        this.#emitter = emitter;\n\n        this.#throwError = throwError;\n        this.#throwErrorFromErrorResponse = throwErrorFromErrorResponse;\n    }\n\n    async connect(token: string): Promise<void> {\n        if (this.twilsockClient) {\n            throw new InternalError(\"Twilsock connection already exists\");\n        }\n        const clientOptions = {\n            region: this.#clientOptions.region || this.#environmentConfig.region,\n            clientMetadata: {\n                type: FLEX_SDK_NAME,\n                sdk: FLEX_SDK_PLATFORM,\n                sdkv: version,\n                app: this.#clientOptions.appName,\n                appv: this.#clientOptions.appVersion\n            }\n        };\n        this.twilsockClient = this.#twilsockClientFactory(token, this.#productId, clientOptions);\n        this.#proxyEventsFromTwilsockClient();\n        this.#proxyLogsFromTwilsockClient();\n        this.twilsockClient.connect();\n        await this.#waitUntilConnectedOrRejected();\n    }\n\n    #proxyTwilsockClientEvent = (event: TwilsockClientEvent, alias: TwilsockEvent) => {\n        this.getRawTwilsockClient().on(event, (...args: unknown[]) => this.#emitter.emit(alias, ...args));\n    };\n\n    #proxyEventsFromTwilsockClient = () => {\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.TokenExpired, TwilsockEvent.TokenExpired);\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.TokenAboutToExpire, TwilsockEvent.TokenAboutToExpire);\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.StateChanged, TwilsockEvent.StateChanged);\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.Connected, TwilsockEvent.Connected);\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.Disconnected, TwilsockEvent.Disconnected);\n        this.#listenAndEmitConnectionError();\n    };\n\n    #proxyLogsFromTwilsockClient = () => {\n        const twilsockLogger = loglevel.getLogger(\"twilsock\");\n        twilsockLogger.methodFactory =\n            (methodName: LoglevelMethodName) =>\n            (...messages: unknown[]) => {\n                return this.#logger[methodName](...messages);\n            };\n        twilsockLogger.setLevel(\"trace\");\n    };\n\n    #listenAndEmitConnectionError = (): void => {\n        this.getRawTwilsockClient().on(TwilsockClientEvent.ConnectionError, ({ errorCode, metadata, message }) => {\n            const flexError = new FlexSdkError(errorCode || ErrorCode.TwilsockConnectionError, metadata, message);\n            this.#emitter.emit(TwilsockEvent.ConnectionError, flexError);\n        });\n    };\n\n    #isConnectionError = (error: Error): boolean => {\n        return error instanceof FlexSdkError && error.code === ErrorCode.TwilsockConnectionError;\n    };\n\n    #isTooManyRequestsError = (error: Error): boolean => {\n        const HTTP_STATUS_CODE_TOO_MANY_REQUESTS = 429;\n\n        return (\n            isTwilsockReplyError(error) &&\n            (error as TwilsockReplyError).reply.status.code === HTTP_STATUS_CODE_TOO_MANY_REQUESTS\n        );\n    };\n\n    #isServerError = (error: Error): boolean => {\n        const HTTPS_STATUS_CODE_INTERNAL_SERVER_ERROR = 500;\n\n        return (\n            isTwilsockReplyError(error) &&\n            (error as TwilsockReplyError).reply.status.code >= HTTPS_STATUS_CODE_INTERNAL_SERVER_ERROR\n        );\n    };\n\n    #retryOnTooManyErrorOrConnectionErrorOrServerError = (error: Error): boolean => {\n        return this.#isTooManyRequestsError(error) || this.#isServerError(error) || this.#isConnectionError(error);\n    };\n\n    #updateTokenOnce = async (token: string): Promise<void> => {\n        if (!this.twilsockClient) {\n            const metadata = {\n                module: extractModuleFromPath(__dirname),\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n\n            this.#throwError(ErrorCode.InvalidState, metadata, \"no twilsock client\");\n        } else {\n            await this.twilsockClient.updateToken(token);\n            this.#emitter.emit(TwilsockEvent.TokenUpdated, token);\n        }\n    };\n\n    async updateToken(token: string): Promise<void> {\n        try {\n            await retry<void>({\n                functionToRetry: () => this.#updateTokenOnce(token),\n                retryCondition: this.#retryOnTooManyErrorOrConnectionErrorOrServerError,\n                logger: this.#logger\n            });\n        } catch (error) {\n            const metadata = {\n                module: extractModuleFromPath(__dirname),\n                severity: ErrorSeverity.Error,\n                source: \"update Twilsock token\"\n            };\n\n            this.#throwErrorFromErrorResponse(error, metadata);\n        }\n    }\n\n    #waitUntilConnectedOrRejected = (): Promise<void> => {\n        return new Promise((resolve, reject) => {\n            if (this.getRawTwilsockClient().isConnected) {\n                resolve();\n                return;\n            }\n\n            const successHandler = () => {\n                return resolve();\n            };\n\n            const connectionErrorHandler = (error: FlexSdkError) => {\n                return reject(error);\n            };\n\n            const removeConnectionListeners = () => {\n                this.removeListener(TwilsockEvent.Connected, successHandler);\n                this.removeListener(TwilsockEvent.ConnectionError, connectionErrorHandler);\n            };\n\n            this.addListener(TwilsockEvent.Connected, () => {\n                removeConnectionListeners();\n                successHandler();\n            });\n            this.addListener(TwilsockEvent.ConnectionError, (error: FlexSdkError) => {\n                removeConnectionListeners();\n                connectionErrorHandler(error);\n            });\n        });\n    };\n\n    getRawTwilsockClient(): TwilsockClient {\n        if (!this.twilsockClient) {\n            throw new InternalError(\"Twilsock hasn't been initialized\");\n        }\n        return this.twilsockClient;\n    }\n\n    async post<T>(url: string, headers: Headers, body: object): Promise<TwilsockResult<T>> {\n        try {\n            return await this.getRawTwilsockClient().post(url, headers, body);\n        } catch (error) {\n            const code: number = error.body?.code || ErrorCode.SDK;\n            const message: string = error.body?.message || error.message;\n            const metadata = {\n                module: extractModuleFromPath(__dirname),\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n\n            return this.#throwError(code, metadata, message, error);\n        }\n    }\n\n    async destroy(): Promise<void> {\n        if (!this.twilsockClient) {\n            return;\n        }\n        const twilsockClient = this.twilsockClient;\n        const connectionDestroyed = new Promise((resolve) => {\n            twilsockClient.on(TwilsockClientEvent.Disconnected, resolve);\n        });\n        await twilsockClient.disconnect();\n        await connectionDestroyed;\n\n        \n        \n        delete this.twilsockClient;\n        this.#emitter.removeAllListeners();\n    }\n\n    addListener(eventName: TwilsockEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.on(eventName, listener);\n        return this;\n    }\n\n    removeListener(eventName: TwilsockEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.removeListener(eventName, listener);\n        return this;\n    }\n\n    isConnected(): boolean {\n        if (!this.twilsockClient) {\n            return false;\n        }\n\n        return this.getRawTwilsockClient().isConnected;\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { Role } from \"~/modules/auth\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { ErrorCode, ErrorSeverity, ThrowAndReportErrorFunction, throwAndReportErrorRTTI } from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\n\nexport const requiredRole = (container: interfaces.Container) => (role: Role) => {\n    return function decorator(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n        const originalMethod = descriptor.value;\n        const session = container.get<Session>(sessionRTTI);\n\n        \n        descriptor.value = function wrappedMethod(...args: Array<unknown>) {\n            const currentRoles = session.roles;\n            if (!currentRoles.includes(role)) {\n                const wrongRole: string = currentRoles.length ? currentRoles.toString() : \"no role\";\n\n                const metadata = {\n                    module: extractModuleFromPath(__dirname),\n                    severity: ErrorSeverity.Error,\n                    source: extractFileNameFromPath(__filename)\n                };\n                const throwAndReportError = container.get<ThrowAndReportErrorFunction>(throwAndReportErrorRTTI);\n                throwAndReportError(\n                    ErrorCode.Forbidden,\n                    metadata,\n                    `Expected the role ${role}, but got ${wrongRole} instead.`\n                );\n            }\n\n            const result = originalMethod.apply(this, args);\n            return result;\n        };\n    };\n};\n","\n\n\n\n\n\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    \n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    \n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                \n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    \n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                \n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    \n    \n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; \n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    \n\n    function replaceLoggingMethods(level, loggerName) {\n        \n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        \n        this.log = this.debug;\n    }\n\n    \n    \n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    \n    \n    function defaultMethodFactory(methodName, level, loggerName) {\n        \n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          \n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          \n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          \n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          \n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      \n\n\n\n\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  \n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      \n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    \n\n\n\n\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    \n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    \n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","import { injectable, inject } from \"inversify\";\nimport { TelemetryProcessor } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessor\";\nimport { TelemetryProcessingResult } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessingResult\";\nimport { TelemetryEvent } from \"~/modules/telemetry\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, TelemetryLoggerName } from \"~/modules/logger\";\nimport { toSdkBackendEvents } from \"./toSdkBackendEvent\";\nimport { TelemetryBackendEvent } from \"~/backend/generated/Telemetry/model/telemetryBackendEvent\";\nimport { ProcessingStats } from \"~/backend/generated/Telemetry/model/processingStats\";\nimport { TelemetryService } from \"~/backend/generated/Telemetry/api/telemetry.serviceInterface\";\nimport { telemetryServiceRTTI } from \"~/backend/backend.rtti\";\nimport {\n    ErrorCode,\n    ErrorSeverity,\n    FlexSdkError,\n    ThrowErrorFromErrorResponseFunction,\n    throwErrorFromErrorResponseRTTI,\n    ThrowAndReportErrorFunction,\n    throwAndReportErrorRTTI\n} from \"~/modules/error\";\nimport { assertNotEmptyString } from \"~/utils/assert\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { RateLimiter, RateLimiterFactory, rateLimiterFactoryRTTI } from \"~/modules/ratelimiter\";\nimport { TelemetryRateLimiterOptions } from \"~/modules/telemetry/TelemetryProcessor/TelemetryRateLimiterOptions\";\nimport { telemetryRateLimiterOptionsRTTI } from \"~/modules/telemetry/telemetry.rtti\";\n\nconst TELEMETRY_DISABLED_HTTP_STATUS_CODE = 409;\nconst MAX_NUMBER_OF_EVENTS_IN_BATCH = 50;\n\n@injectable()\nexport class TwilioTelemetryProcessor implements TelemetryProcessor {\n    readonly #logger: Logger;\n\n    readonly #telemetryService: TelemetryService;\n\n    #isTelemetryDisabled = false;\n\n    readonly #throwErrorFromErrorResponse: ThrowErrorFromErrorResponseFunction;\n\n    readonly #throwAndReportError: ThrowAndReportErrorFunction;\n\n    readonly #rateLimiterFactory: RateLimiterFactory;\n\n    readonly #rateLimiterOptions: TelemetryRateLimiterOptions;\n\n    constructor(\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory<TelemetryLoggerName>,\n        @inject(telemetryServiceRTTI) telemetryService: TelemetryService,\n        @inject(throwAndReportErrorRTTI) throwAndReportError: ThrowAndReportErrorFunction,\n        @inject(throwErrorFromErrorResponseRTTI) throwErrorFromErrorResponse: ThrowErrorFromErrorResponseFunction,\n        @inject(rateLimiterFactoryRTTI) rateLimiterFactory: RateLimiterFactory,\n        @inject(telemetryRateLimiterOptionsRTTI) rateLimiterOptions: TelemetryRateLimiterOptions\n    ) {\n        this.#logger = getLogger(TelemetryLoggerName.TelemetryProcessor);\n        this.#telemetryService = telemetryService;\n        this.#throwAndReportError = throwAndReportError;\n        this.#throwErrorFromErrorResponse = throwErrorFromErrorResponse;\n        this.#rateLimiterFactory = rateLimiterFactory;\n        this.#rateLimiterOptions = rateLimiterOptions;\n    }\n\n    async processEvents(\n        payloadType: string,\n        groupName?: string,\n        sessionData?: object,\n        ...events: TelemetryEvent[]\n    ): Promise<TelemetryProcessingResult> {\n        assertNotEmptyString(payloadType, \"payload type\");\n\n        if (typeof groupName !== \"undefined\") {\n            assertNotEmptyString(groupName, \"group name\");\n        }\n\n        events.forEach(({ eventName, eventSource }) => {\n            assertNotEmptyString(eventName, \"event name\");\n            if (typeof eventSource !== \"undefined\") {\n                assertNotEmptyString(eventSource, \"event source\");\n            }\n        });\n\n        if (this.#isTelemetryDisabled) {\n            this.#logger.trace(\"Events not sent: telemetry disabled\");\n            return {\n                eventsNotProcessed: events.length,\n                eventsSucceeded: 0,\n                eventsFailed: 0\n            };\n        }\n        this.#logger.debug(\"common attributes:\", sessionData);\n        const backendEvents = toSdkBackendEvents(\n            this.#throwAndReportError,\n            payloadType,\n            groupName,\n            sessionData,\n            ...events\n        );\n\n        let eventsSucceeded = 0;\n        let eventsFailed = 0;\n\n        if (backendEvents.length) {\n            let backendEventsBatch;\n            const arrayOfPromises = [];\n            for (let i = 0; i < backendEvents.length; i += MAX_NUMBER_OF_EVENTS_IN_BATCH) {\n                backendEventsBatch = backendEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_IN_BATCH);\n                arrayOfPromises.push(this.#sendTelemetryEvents(payloadType, ...backendEventsBatch));\n            }\n            const batchResults = await Promise.all(arrayOfPromises);\n            eventsSucceeded = batchResults.reduce((acc, batch) => acc + batch.number_of_successful_events, 0);\n            eventsFailed = batchResults.reduce((acc, batch) => acc + batch.number_of_failed_events, 0);\n        }\n\n        const eventsNotProcessed = events.length - eventsSucceeded - eventsFailed;\n\n        return {\n            eventsSucceeded,\n            eventsFailed,\n            eventsNotProcessed\n        };\n    }\n\n    #sendTelemetryEvents = async (\n        payloadType: string,\n        ...events: TelemetryBackendEvent[]\n    ): Promise<ProcessingStats> => {\n        this.#logger.debug(\"Sending\", events.length, \"telemetry events\");\n        this.#logger.trace(\"Events\", events);\n        let stats: ProcessingStats = {\n            number_of_successful_events: 0,\n            number_of_failed_events: 0\n        };\n\n        try {\n            const rateLimiter = this.#getRateLimiter(payloadType);\n            rateLimiter.check();\n\n            const { body } = await this.#telemetryService.postTelemetryEvents({ events });\n\n            if (body) {\n                stats = body;\n                this.#logger.debug(\"Telemetry sent successfully\");\n            }\n        } catch (error) {\n            if (\n                error instanceof FlexSdkError &&\n                [ErrorCode.TooManySDKRequests, ErrorCode.TemporarilyDisabled].includes(error.code)\n            ) {\n                \n                return stats;\n            }\n\n            const httpErrorCode = error.wrappedError?.status;\n            if (httpErrorCode !== TELEMETRY_DISABLED_HTTP_STATUS_CODE) {\n                const metadata = {\n                    module: extractModuleFromPath(__dirname),\n                    severity: ErrorSeverity.Error,\n                    eventSource: extractFileNameFromPath(__filename)\n                };\n\n                this.#throwErrorFromErrorResponse(error, metadata);\n            }\n            this.#logger.warn(\"Telemetry is disabled for this account\");\n            this.#isTelemetryDisabled = true;\n        }\n\n        return stats;\n    };\n\n    #getRateLimiter = (name: string): RateLimiter => {\n        return this.#rateLimiterFactory({\n            ...this.#rateLimiterOptions,\n            name\n        });\n    };\n}\n","import { TelemetryEvent } from \"~/modules/telemetry/\";\nimport { TelemetryBackendEvent } from \"~/backend/generated/Telemetry/model/telemetryBackendEvent\";\nimport { mapAllKeysToSnakeCase } from \"~/utils/mapKeys\";\nimport { Payload } from \"~/backend/generated/Telemetry/model/payload\";\nimport { ErrorCode, ErrorSeverity, ThrowAndReportErrorFunction } from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\n\nfunction instanceOfPayload(object: object): object is Payload {\n    return (\n        Object.prototype.hasOwnProperty.call(object, \"event_name\") &&\n        Object.prototype.hasOwnProperty.call(object, \"client_timestamp\")\n    );\n}\n\nfunction toBackendEvent(\n    throwError: ThrowAndReportErrorFunction,\n    payloadType: string,\n    event: TelemetryEvent,\n    groupName?: string,\n    sessionData?: object\n): TelemetryBackendEvent {\n    const mappedSessionData = sessionData === undefined ? {} : mapAllKeysToSnakeCase(sessionData);\n    const mappedEventData = {\n        ...mapAllKeysToSnakeCase(event),\n        client_timestamp: new Date().toISOString(), \n        event_group: groupName \n    };\n    if (instanceOfPayload(mappedEventData)) {\n        return {\n            payload_type: payloadType, \n            payload: {\n                ...mappedEventData,\n                ...mappedSessionData\n            }\n        };\n    }\n    const metadata = {\n        module: extractModuleFromPath(__dirname),\n        severity: ErrorSeverity.Error,\n        source: extractFileNameFromPath(__filename)\n    };\n    return throwError(ErrorCode.InvalidParams, metadata, \"Telemetry event has missing fields\");\n}\n\nexport function toSdkBackendEvents(\n    throwError: ThrowAndReportErrorFunction,\n    payloadType: string,\n    groupName?: string,\n    sessionData?: object,\n    ...events: TelemetryEvent[]\n): TelemetryBackendEvent[] {\n    return events.map((event: TelemetryEvent) => {\n        return toBackendEvent(throwError, payloadType, event, groupName, sessionData);\n    });\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI } from \"~/modules/error\";\nimport { twilsockAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { TwilsockAdapter } from \"~/backend/TwilsockAdapter/TwilsockAdapter\";\nimport { TwilsockResult } from \"~/modules/websocket\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\n\nimport { Events } from \"../model/events\";\nimport { ProcessingStats } from \"../model/processingStats\";\n\nimport { TelemetryService } from \"./telemetry.serviceInterface\";\n\n@injectable()\nexport class TelemetryServiceImpl implements TelemetryService {\n    private basePath: string = \"http://flex-sdk.twilio.com/v1\";\n\n    private twilsockAdapter: TwilsockAdapter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(twilsockAdapterRTTI) twilsockAdapter: TwilsockAdapter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.twilsockAdapter = twilsockAdapter;\n        this.#throwError = throwError;\n    }\n\n    \n\n\n\n\n    public async postTelemetryEvents(events: Events): Promise<TwilsockResult<ProcessingStats>> {\n        if (events === null || events === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter events was null or undefined when calling postTelemetryEvents.\"\n            );\n        }\n\n        const response = await this.twilsockAdapter.post<ProcessingStats>(`${this.basePath}/Telemetry/Events`, events);\n        return response;\n    }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI, isDownstreamErrorCode } from \"~/modules/error\";\nimport { httpAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { HttpAdapter } from \"~/backend/HttpAdapter/HttpAdapter\";\nimport { AuthenticationMethod } from \"~/backend/HttpAdapter/authenticationMethods\";\nimport { convertDateStringValuesToDate } from \"~/utils/processHttpAdapterResponse\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\n\nimport { AccountConfigData } from \"../model/accountConfigData\";\nimport { PublicConfigResponse } from \"../model/publicConfigResponse\";\n\nimport { ConfigurationService } from \"./configuration.serviceInterface\";\n\n@injectable()\nexport class ConfigurationServiceImpl implements ConfigurationService {\n    private httpAdapter: HttpAdapter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(httpAdapterRTTI) httpAdapter: HttpAdapter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.httpAdapter = httpAdapter;\n        this.#throwError = throwError;\n    }\n\n    \n\n\n\n\n\n\n    public async fetchConfiguration(\n        queryParamName?: \"UiVersion\",\n        queryParamValue?: string,\n        options?: object\n    ): Promise<AccountConfigData> {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n\n        let response;\n        try {\n            response = await this.httpAdapter.get<AccountConfigData>(\n                `https://flex-api[environment].twilio.com/v1/Configuration?${encodeURIComponent(\n                    String(queryParamName)\n                )}=${encodeURIComponent(String(queryParamValue))}`,\n                AuthenticationMethod.Basic,\n                options\n            );\n        } catch (e) {\n            if (isDownstreamErrorCode(e.code)) {\n                const message = `ConfigurationService - ${e.message}`;\n                return this.#throwError(ErrorCode.DownstreamServiceError, metadata, message);\n            }\n\n            return Promise.reject(e);\n        }\n        const processedResponse = convertDateStringValuesToDate<AccountConfigData>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n\n    public async fetchPublicConfiguration(\n        queryParamName: \"AccountSid\" | \"RuntimeDomain\",\n        queryParamValue: string\n    ): Promise<PublicConfigResponse> {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        if (queryParamName === null || queryParamName === undefined) {\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter queryParamName was null or undefined.\"\n            );\n        }\n        if (queryParamValue === null || queryParamValue === undefined) {\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter queryParamValue was null or undefined.\"\n            );\n        }\n\n        let response;\n        try {\n            response = await this.httpAdapter.get<PublicConfigResponse>(\n                `https://flex-api[environment].twilio.com/v1/Configuration/Public?${encodeURIComponent(\n                    String(queryParamName)\n                )}=${encodeURIComponent(String(queryParamValue))}`,\n                undefined\n            );\n        } catch (e) {\n            if (isDownstreamErrorCode(e.code)) {\n                const message = `ConfigurationService - ${e.message}`;\n                return this.#throwError(ErrorCode.DownstreamServiceError, metadata, message);\n            }\n\n            return Promise.reject(e);\n        }\n        const processedResponse = convertDateStringValuesToDate<PublicConfigResponse>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n    public async updateConfiguration(accountConfigData: Partial<AccountConfigData>): Promise<AccountConfigData> {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        if (accountConfigData === null || accountConfigData === undefined) {\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter accountConfigData was null or undefined.\"\n            );\n        }\n\n        let response;\n        try {\n            response = await this.httpAdapter.post<AccountConfigData>(\n                `https://flex-api[environment].twilio.com/v1/Configuration`,\n                AuthenticationMethod.Basic,\n                accountConfigData\n            );\n        } catch (e) {\n            if (isDownstreamErrorCode(e.code)) {\n                const message = `ConfigurationService - ${e.message}`;\n                return this.#throwError(ErrorCode.DownstreamServiceError, metadata, message);\n            }\n\n            return Promise.reject(e);\n        }\n        const processedResponse = convertDateStringValuesToDate<AccountConfigData>(response);\n        return processedResponse;\n    }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI, isDownstreamErrorCode } from \"~/modules/error\";\nimport { httpAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { HttpAdapter } from \"~/backend/HttpAdapter/HttpAdapter\";\nimport { AuthenticationMethod } from \"~/backend/HttpAdapter/authenticationMethods\";\nimport { convertDateStringValuesToDate } from \"~/utils/processHttpAdapterResponse\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\n\nimport { FeaturesConfig } from \"../model/featuresConfig\";\n\nimport { FeaturesService } from \"./features.serviceInterface\";\n\n@injectable()\nexport class FeaturesServiceImpl implements FeaturesService {\n    private httpAdapter: HttpAdapter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(httpAdapterRTTI) httpAdapter: HttpAdapter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.httpAdapter = httpAdapter;\n        this.#throwError = throwError;\n    }\n\n    \n\n\n\n\n    public async fetchFeatures(options?: object): Promise<FeaturesConfig> {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n\n        let response;\n        try {\n            response = await this.httpAdapter.get<FeaturesConfig>(\n                `https://flex[environment].twilio.com/api/v1/Session`,\n                AuthenticationMethod.HostedFlex,\n                options\n            );\n        } catch (e) {\n            if (isDownstreamErrorCode(e.code)) {\n                const message = `FeaturesService - ${e.message}`;\n                return this.#throwError(ErrorCode.DownstreamServiceError, metadata, message);\n            }\n\n            return Promise.reject(e);\n        }\n        const processedResponse = convertDateStringValuesToDate<FeaturesConfig>(response);\n        return processedResponse;\n    }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI, isDownstreamErrorCode } from \"~/modules/error\";\nimport { httpAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { HttpAdapter } from \"~/backend/HttpAdapter/HttpAdapter\";\nimport { AuthenticationMethod } from \"~/backend/HttpAdapter/authenticationMethods\";\nimport { convertDateStringValuesToDate } from \"~/utils/processHttpAdapterResponse\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\n\nimport { IdpUrlResponse } from \"../model/idpUrlResponse\";\nimport { SSOLoginRequestBody } from \"../model/sSOLoginRequestBody\";\nimport { Token } from \"../model/token\";\nimport { TokenData } from \"../model/tokenData\";\nimport { TokenRefreshResult } from \"../model/tokenRefreshResult\";\n\nimport { FederatedAuthService } from \"./federatedAuth.serviceInterface\";\n\n@injectable()\nexport class FederatedAuthServiceImpl implements FederatedAuthService {\n    private httpAdapter: HttpAdapter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(httpAdapterRTTI) httpAdapter: HttpAdapter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.httpAdapter = httpAdapter;\n        this.#throwError = throwError;\n    }\n\n    \n\n\n\n\n\n\n    public async getIdpUrl(accountSid: string, sSOLoginRequestBody: SSOLoginRequestBody): Promise<IdpUrlResponse> {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        if (accountSid === null || accountSid === undefined) {\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter accountSid was null or undefined.\");\n        }\n        if (sSOLoginRequestBody === null || sSOLoginRequestBody === undefined) {\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter sSOLoginRequestBody was null or undefined.\"\n            );\n        }\n\n        let response;\n        try {\n            response = await this.httpAdapter.post<IdpUrlResponse>(\n                `https://iam[environment].twilio.com/v1/Accounts/${encodeURIComponent(\n                    String(accountSid)\n                )}/authenticate`,\n                undefined,\n                sSOLoginRequestBody\n            );\n        } catch (e) {\n            if (isDownstreamErrorCode(e.code)) {\n                const message = `FederatedAuthService - ${e.message}`;\n                return this.#throwError(ErrorCode.DownstreamServiceError, metadata, message);\n            }\n\n            return Promise.reject(e);\n        }\n        const processedResponse = convertDateStringValuesToDate<IdpUrlResponse>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n\n    public async refreshToken(accountSid: string, token: Token): Promise<TokenRefreshResult> {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        if (accountSid === null || accountSid === undefined) {\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter accountSid was null or undefined.\");\n        }\n        if (token === null || token === undefined) {\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter token was null or undefined.\");\n        }\n\n        let response;\n        try {\n            response = await this.httpAdapter.post<TokenRefreshResult>(\n                `https://iam[environment].twilio.com/v1/Accounts/${encodeURIComponent(\n                    String(accountSid)\n                )}/Tokens/refresh`,\n                undefined,\n                token\n            );\n        } catch (e) {\n            if (isDownstreamErrorCode(e.code)) {\n                const message = `FederatedAuthService - ${e.message}`;\n                return this.#throwError(ErrorCode.DownstreamServiceError, metadata, message);\n            }\n\n            return Promise.reject(e);\n        }\n        const processedResponse = convertDateStringValuesToDate<TokenRefreshResult>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n\n    public async validateToken(accountSid: string, token: Token, options?: object): Promise<TokenData> {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        if (accountSid === null || accountSid === undefined) {\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter accountSid was null or undefined.\");\n        }\n        if (token === null || token === undefined) {\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter token was null or undefined.\");\n        }\n\n        let response;\n        try {\n            response = await this.httpAdapter.post<TokenData>(\n                `https://iam[environment].twilio.com/v1/Accounts/${encodeURIComponent(\n                    String(accountSid)\n                )}/Tokens/validate`,\n                AuthenticationMethod.Basic,\n                token,\n                options\n            );\n        } catch (e) {\n            if (isDownstreamErrorCode(e.code)) {\n                const message = `FederatedAuthService - ${e.message}`;\n                return this.#throwError(ErrorCode.DownstreamServiceError, metadata, message);\n            }\n\n            return Promise.reject(e);\n        }\n        const processedResponse = convertDateStringValuesToDate<TokenData>(response);\n        return processedResponse;\n    }\n}\n","import { ErrorCode, FlexSdkError } from \"~/modules/error\";\n\nexport const defaultRetryConditionOnFlexSdkError = (flexSdkError: FlexSdkError): boolean => {\n    const retryOnErrors = [ErrorCode.Unknown, ErrorCode.TooManyRequests, ErrorCode.NetworkError];\n\n    return retryOnErrors.includes(flexSdkError.code);\n};\n","module.exports = require(\"reflect-metadata\");","import { Container, interfaces } from \"inversify\";\n\nexport function createPureFactory<T extends (...args: unknown[]) => unknown>(containerCreator: () => Container) {\n    return (serviceIdentifier: interfaces.ServiceIdentifier<T>): T => {\n        const factory = (...args: unknown[]): unknown => {\n            const container = containerCreator();\n            const provider = container.get<T>(serviceIdentifier);\n            return provider(...args);\n        };\n        return factory as T;\n    };\n}\n","import { version as packageVersion } from \"package.json\";\nimport { createContainer, getSingletonContainer } from \"~/ioc.config\";\nimport {\n    publicConfigProviderRTTI,\n    PublicConfigProvider,\n    AccountConfigDataGetter,\n    FeaturesConfigDataGetter,\n    getAccountConfigRTTI,\n    getFeaturesConfigRTTI\n} from \"~/modules/config\";\nimport { clientProviderRTTI, ClientProvider } from \"~/modules/client\";\nimport { authenticatorFactoryRTTI, twilioIdpUrlRTTI, AuthenticatorFactory, TwilioIdpUrlFunction } from \"~/modules/auth\";\nimport { LoggerFactory, loggerFactoryRTTI } from \"~/modules/logger\";\nimport { createPureFactory } from \"~/ioc.helper\";\nimport { ClearCache } from \"~/modules/storage\";\nimport { clearCacheRTTI } from \"~/modules/storage/storage.rtti\";\n\nexport type { SessionOptions } from \"./modules/session\";\nexport type { DeepPartial } from \"./utils/DeepPartial\";\nexport type { Without, XOR } from \"./utils/utilityTypes\";\nexport type {\n    AccountConfig,\n    AccountConfigProvider,\n    AccountConfigKeys,\n    AccountConfigData,\n    IntegrationsConfig,\n    OutboundFlows,\n    SkillDefinition,\n    QueueStatsConfiguration,\n    PublicConfig,\n    PublicConfigAttributes,\n    PublicConfigProvider,\n    AccountSidOption,\n    RuntimeDomainOption,\n    TaskQueue,\n    WorkerChannel,\n    DefaultQueueStatsConfiguration,\n    QueueConfiguration,\n    QueueChannelConfiguration,\n    FeaturesConfigDataGetter,\n    FeaturesConfig,\n    FeaturesList,\n    AccountConfigDataGetter,\n    AccountConfigOptions,\n    ChannelConfig,\n    CbmAttachments\n} from \"./modules/config\";\nexport type { Logger, LoggerFactory, LoggerOptions, LoggerLevel, LoggerLevelNumbers } from \"./modules/logger\";\nexport { LoggerName } from \"./modules/logger\";\nexport type { Client, ClientProvider, ClientOptions, ClientConfigType } from \"./modules/client\";\nexport { ClientEvent } from \"./modules/client\";\nexport type {\n    Authenticator,\n    AuthenticatorFactory,\n    TwilioIdpUrlFunction,\n    IdpConfig,\n    Role,\n    TokenData,\n    TokenRefreshResult\n} from \"./modules/auth\";\nexport type { EventPublisher } from \"./modules/events\";\nexport type {\n    TelemetryEvent,\n    TelemetryErrorEvent,\n    TelemetryEventGroup,\n    TelemetryClient,\n    TelemetryProcessingResult,\n    TelemetryOptions\n} from \"./modules/telemetry\";\nexport type { ClearCache } from \"~/modules/storage\";\n\n\n\n\n\n\n\nexport const auth = createPureFactory<AuthenticatorFactory>(createContainer)(authenticatorFactoryRTTI);\n\n\n\n\nexport const getLogger = createPureFactory<LoggerFactory<string>>(getSingletonContainer)(loggerFactoryRTTI);\n\n\n\n\nexport const getTwilioIdpUrl = createPureFactory<TwilioIdpUrlFunction>(createContainer)(twilioIdpUrlRTTI);\n\n\n\n\nexport const getPublicConfig = createPureFactory<PublicConfigProvider>(createContainer)(publicConfigProviderRTTI);\n\n\n\n\nexport const getAccountConfig = createPureFactory<AccountConfigDataGetter>(createContainer)(getAccountConfigRTTI);\n\n\n\n\nexport const getFeaturesConfig = createPureFactory<FeaturesConfigDataGetter>(createContainer)(getFeaturesConfigRTTI);\n\n\n\n\nexport const createClient = createPureFactory<ClientProvider>(createContainer)(clientProviderRTTI);\n\n\n\n\nexport const clearCache = createPureFactory<ClearCache>(createContainer)(clearCacheRTTI);\n\n\n\n\nexport const version: string = packageVersion;\n\nexport type { FlexSdkErrorMetadata } from \"./modules/error\";\nexport { FlexSdkError, ErrorCode, ErrorSeverity } from \"./modules/error\";\n","module.exports = require(\"core-js/modules/es.array.find.js\");","module.exports = require(\"core-js/modules/es.number.is-nan.js\");","module.exports = require(\"core-js/modules/es.string.ends-with.js\");","module.exports = require(\"core-js/modules/es.regexp.constructor.js\");","module.exports = require(\"core-js/modules/es.object.entries.js\");","module.exports = require(\"core-js/modules/es.string.starts-with.js\");"],"sourceRoot":""}